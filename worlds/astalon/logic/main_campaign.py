from ..items import (
    BlueDoor,
    Character,
    Crystal,
    Elevator,
    Eye,
    Face,
    KeyItem,
    RedDoor,
    ShopUpgrade,
    Switch,
    WhiteDoor,
)
from ..locations import LocationName as L
from ..regions import RegionName as R
from .factories import (
    And,
    CanReachEntrance,
    CanReachRegion,
    False_,
    HardLogic,
    Has,
    HasAll,
    HasAny,
    HasBlue,
    HasElevator,
    HasGoal,
    HasRed,
    HasSwitch,
    HasWhite,
    Or,
    RuleFactory,
    True_,
)

easy = (("difficulty", 0),)
characters_off = (("randomize_characters", 0),)
characters_on = (("randomize_characters__ge", 1),)
white_off = (("randomize_white_keys", 0),)
blue_off = (("randomize_blue_keys", 0),)
red_off = (("randomize_red_keys", 0),)
switch_off = (("randomize_switches", 0),)

true = True_()
false = False_()

can_uppies = HardLogic(
    Or(
        True_(opts=characters_off),
        HasAny(Character.ARIAS, Character.BRAM, opts=characters_on),
    )
)
can_extra_height = Or(HasAny(Character.KYULI, KeyItem.BLOCK), can_uppies)
can_extra_height_gold_block = Or(HasAny(Character.KYULI, Character.ZEEK), can_uppies)
can_combo_height = And(can_uppies, HasAll(KeyItem.BELL, KeyItem.BLOCK))
can_block_in_wall = HardLogic(HasAll(Character.ZEEK, KeyItem.BLOCK))
can_crystal = Or(
    HasAny(Character.ALGUS, KeyItem.BLOCK, ShopUpgrade.BRAM_WHIPLASH),
    HasAll(Character.ZEEK, KeyItem.BANISH),
    HardLogic(Has(ShopUpgrade.KYULI_RAY)),
)
can_crystal_wo_whiplash = Or(
    HasAny(Character.ALGUS, KeyItem.BLOCK),
    HasAll(Character.ZEEK, KeyItem.BANISH),
    HardLogic(Has(ShopUpgrade.KYULI_RAY)),
)
can_big_magic = HardLogic(HasAll(Character.ALGUS, KeyItem.BANISH, ShopUpgrade.ALGUS_ARCANIST))
can_kill_ghosts = Or(
    HasAny(KeyItem.BANISH, KeyItem.BLOCK),
    HasAll(ShopUpgrade.ALGUS_METEOR, KeyItem.CHALICE, opts=easy),
    HardLogic(Has(ShopUpgrade.ALGUS_METEOR)),
)

otherwise_crystal = Or(
    HasAny(Character.ALGUS, KeyItem.BLOCK, ShopUpgrade.BRAM_WHIPLASH),
    HasAll(Character.ZEEK, KeyItem.BANISH),
    HardLogic(Has(ShopUpgrade.KYULI_RAY)),
    opts=switch_off,
)
otherwise_bow = Has(KeyItem.BOW, opts=switch_off)
chalice_on_easy = Or(HardLogic(True_()), Has(KeyItem.CHALICE, opts=easy))

elevator_apex = Or(
    HasElevator(Elevator.APEX, opts=(("apex_elevator", 1),)),
    Has(KeyItem.ASCENDANT_KEY, opts=(("apex_elevator", 0),)),
)
# TODO: better implementations
shop_cheap = CanReachRegion(R.GT_LEFT)
shop_moderate = CanReachRegion(R.MECH_START)
shop_expensive = CanReachRegion(R.ROA_START)

MAIN_ENTRANCE_RULES: dict[tuple[R, R], RuleFactory] = {
    (R.SHOP, R.SHOP_ALGUS): Has(Character.ALGUS),
    (R.SHOP, R.SHOP_ARIAS): Has(Character.ARIAS),
    (R.SHOP, R.SHOP_KYULI): Has(Character.KYULI),
    (R.SHOP, R.SHOP_ZEEK): Has(Character.ZEEK),
    (R.SHOP, R.SHOP_BRAM): Has(Character.BRAM),
    (R.GT_ENTRANCE, R.GT_BESTIARY): HasBlue(BlueDoor.GT_HUNTER, otherwise=True),
    (R.GT_ENTRANCE, R.GT_BABY_GORGON): And(
        Has(Eye.GREEN),
        Or(
            Has(KeyItem.CLAW),
            HardLogic(
                And(
                    Has(Character.ZEEK),
                    Or(HasAll(Character.KYULI, KeyItem.BELL), Has(KeyItem.BLOCK)),
                )
            ),
        ),
    ),
    (R.GT_ENTRANCE, R.GT_BOTTOM): Or(
        HasSwitch(Switch.GT_2ND_ROOM),
        HasWhite(WhiteDoor.GT_START, otherwise=True, opts=switch_off),
    ),
    (R.GT_ENTRANCE, R.GT_VOID): Has(KeyItem.VOID),
    (R.GT_ENTRANCE, R.GT_GORGONHEART): Or(
        HasSwitch(Switch.GT_GH_SHORTCUT),
        HasAny(KeyItem.ICARUS, KeyItem.BOOTS),
    ),
    (R.GT_ENTRANCE, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.GT_ENTRANCE, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.GT_ENTRANCE, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.GT_ENTRANCE, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.GT_ENTRANCE, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.GT_ENTRANCE, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.GT_ENTRANCE, R.APEX): elevator_apex,
    (R.GT_ENTRANCE, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.GT_ENTRANCE, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.GT_ENTRANCE, R.TR_START): HasElevator(Elevator.TR),
    (R.GT_BOTTOM, R.GT_VOID): Has(Eye.RED),
    (R.GT_BOTTOM, R.GT_GORGONHEART): HasWhite(WhiteDoor.GT_MAP, otherwise=True),
    (R.GT_BOTTOM, R.GT_UPPER_PATH): Or(
        HasSwitch(Crystal.GT_ROTA),
        can_uppies,
        And(Has(KeyItem.STAR), HasBlue(BlueDoor.GT_RING, otherwise=True)),
        Has(KeyItem.BLOCK),
    ),
    (R.GT_BOTTOM, R.CAVES_START): Or(
        Has(Character.KYULI),
        HardLogic(HasAny(Character.ZEEK, KeyItem.BOOTS)),
    ),
    (R.GT_VOID, R.GT_BOTTOM): Has(Eye.RED),
    (R.GT_VOID, R.MECH_SNAKE): HasSwitch(Switch.MECH_SNAKE_2),
    (R.GT_GORGONHEART, R.GT_ORBS_DOOR): HasBlue(BlueDoor.GT_ORBS, otherwise=True),
    (R.GT_GORGONHEART, R.GT_LEFT): Or(
        HasSwitch(Switch.GT_CROSSES),
        HasSwitch(Switch.GT_1ST_CYCLOPS, otherwise=True),
    ),
    (R.GT_LEFT, R.GT_GORGONHEART): Or(
        HasSwitch(Switch.GT_CROSSES, otherwise=True),
        HasSwitch(Switch.GT_1ST_CYCLOPS),
    ),
    (R.GT_LEFT, R.GT_ORBS_HEIGHT): can_extra_height,
    (R.GT_LEFT, R.GT_ASCENDANT_KEY): HasBlue(BlueDoor.GT_ASCENDANT, otherwise=True),
    (R.GT_LEFT, R.GT_TOP_LEFT): Or(
        HasSwitch(Switch.GT_ARIAS),
        HasAny(Character.ARIAS, KeyItem.CLAW),
        HasAll(KeyItem.BLOCK, Character.KYULI, KeyItem.BELL),
    ),
    (R.GT_LEFT, R.GT_TOP_RIGHT): can_extra_height,
    (R.GT_TOP_LEFT, R.GT_BUTT): Or(
        HasSwitch(Switch.GT_BUTT_ACCESS),
        CanReachRegion(R.GT_SPIKE_TUNNEL_SWITCH, opts=switch_off),
    ),
    (R.GT_TOP_RIGHT, R.GT_SPIKE_TUNNEL): Or(
        HasSwitch(Switch.GT_SPIKE_TUNNEL),
        CanReachRegion(R.GT_TOP_LEFT, opts=switch_off),
    ),
    (R.GT_SPIKE_TUNNEL, R.GT_TOP_RIGHT): HasSwitch(Switch.GT_SPIKE_TUNNEL),
    (R.GT_SPIKE_TUNNEL, R.GT_SPIKE_TUNNEL_SWITCH): can_extra_height,
    (R.GT_SPIKE_TUNNEL_SWITCH, R.GT_BUTT): Or(
        HardLogic(Has(KeyItem.STAR)),
        HasAll(KeyItem.STAR, KeyItem.BELL, opts=easy),
    ),
    (R.GT_BUTT, R.GT_TOP_LEFT): HasSwitch(Switch.GT_BUTT_ACCESS),
    (R.GT_BUTT, R.GT_SPIKE_TUNNEL_SWITCH): Has(KeyItem.STAR),
    (R.GT_BUTT, R.GT_BOSS): Or(HasWhite(WhiteDoor.GT_TAUROS), CanReachRegion(R.GT_TOP_RIGHT, opts=white_off)),
    (R.GT_BOSS, R.GT_BUTT): HasWhite(WhiteDoor.GT_TAUROS),
    (R.GT_BOSS, R.MECH_START): Has(Eye.RED),
    (R.GT_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.GT_BOSS, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.GT_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.GT_BOSS, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.GT_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.GT_BOSS, R.APEX): elevator_apex,
    (R.GT_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.GT_BOSS, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.GT_BOSS, R.TR_START): HasElevator(Elevator.TR),
    (R.GT_UPPER_ARIAS, R.GT_OLD_MAN_FORK): Or(
        HasSwitch(Crystal.GT_LADDER),
        CanReachRegion(R.GT_LADDER_SWITCH, opts=switch_off),
    ),
    (R.GT_UPPER_ARIAS, R.MECH_SWORD_CONNECTION): Or(
        Has(Character.ARIAS),
        HasSwitch(Switch.GT_UPPER_ARIAS),
        CanReachRegion(R.GT_ARIAS_SWORD_SWITCH, opts=switch_off),
    ),
    (R.GT_OLD_MAN_FORK, R.GT_UPPER_ARIAS): Or(
        HasSwitch(Crystal.GT_LADDER),
        CanReachRegion(R.GT_LADDER_SWITCH, opts=switch_off),
    ),
    (R.GT_OLD_MAN_FORK, R.GT_SWORD_FORK): HasBlue(BlueDoor.GT_SWORD, otherwise=True),
    (R.GT_OLD_MAN_FORK, R.GT_OLD_MAN): Or(
        Has(KeyItem.CLAW),
        # TODO: you don't need both switches, revisit when adding old man
        HasSwitch(Crystal.GT_OLD_MAN_1, Crystal.GT_OLD_MAN_2),
        otherwise_crystal,
    ),
    (R.GT_SWORD_FORK, R.GT_SWORD): HasSwitch(Switch.GT_SWORD_ACCESS, otherwise=True),
    (R.GT_SWORD_FORK, R.GT_ARIAS_SWORD_SWITCH): Or(Has(KeyItem.SWORD), HasAll(KeyItem.BOW, KeyItem.BELL)),
    (R.GT_UPPER_PATH, R.GT_UPPER_PATH_CONNECTION): HasSwitch(Switch.GT_UPPER_PATH_ACCESS),
    (R.GT_UPPER_PATH_CONNECTION, R.GT_UPPER_PATH): HasSwitch(Switch.GT_UPPER_PATH_ACCESS, otherwise=True),
    (R.GT_UPPER_PATH_CONNECTION, R.MECH_SWORD_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.GT_UPPER_PATH_CONNECTION, R.MECH_BOTTOM_CAMPFIRE): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.MECH_START, R.GT_LADDER_SWITCH): And(Has(Eye.RED), can_crystal),
    (R.MECH_START, R.MECH_BK): And(HasBlue(BlueDoor.MECH_SHORTCUT, otherwise=True), can_extra_height),
    (R.MECH_START, R.MECH_WATCHER): And(
        Or(HasSwitch(Switch.MECH_CANNON), otherwise_crystal),
        Or(
            HasWhite(WhiteDoor.MECH_2ND),
            And(
                CanReachRegion(R.MECH_SWORD_CONNECTION),
                HasSwitch(Switch.MECH_LOWER_KEY, otherwise=True),
                opts=white_off,
            ),
        ),
    ),
    (R.MECH_START, R.MECH_LINUS): Or(HasSwitch(Crystal.MECH_LINUS), otherwise_crystal),
    (R.MECH_START, R.MECH_LOWER_VOID): HasBlue(BlueDoor.MECH_RED, otherwise=True),
    (R.MECH_START, R.MECH_SACRIFICE): can_extra_height,
    (R.MECH_START, R.GT_BOSS): Has(Eye.RED),
    (R.MECH_LINUS, R.MECH_START): Or(HasSwitch(Crystal.MECH_LINUS), otherwise_crystal),
    (R.MECH_LINUS, R.MECH_SWORD_CONNECTION): HasSwitch(Switch.MECH_LINUS, otherwise=True),
    (R.MECH_SWORD_CONNECTION, R.MECH_BOOTS_CONNECTION): And(
        HasBlue(BlueDoor.MECH_BOOTS, otherwise=True),
        Or(
            HasSwitch(Crystal.MECH_LOWER),
            otherwise_crystal,
            HasAny(KeyItem.CLAW, KeyItem.CLOAK),
            HasAll(Character.KYULI, KeyItem.ICARUS),
            HardLogic(Has(KeyItem.BOOTS)),
        ),
    ),
    (R.MECH_SWORD_CONNECTION, R.GT_UPPER_PATH_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.MECH_SWORD_CONNECTION, R.MECH_LOWER_ARIAS): Has(Character.ARIAS),
    (R.MECH_SWORD_CONNECTION, R.MECH_BOTTOM_CAMPFIRE): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.MECH_SWORD_CONNECTION, R.MECH_LINUS): HasSwitch(Switch.MECH_LINUS),
    (R.MECH_SWORD_CONNECTION, R.GT_UPPER_ARIAS): Or(Has(Character.ARIAS), HasSwitch(Switch.GT_UPPER_ARIAS)),
    (R.MECH_BOOTS_CONNECTION, R.MECH_BOTTOM_CAMPFIRE): HasBlue(BlueDoor.MECH_VOID, otherwise=True),
    (R.MECH_BOOTS_CONNECTION, R.MECH_BOOTS_LOWER): Or(
        HasSwitch(Switch.MECH_BOOTS),
        HasAny(Eye.RED, KeyItem.STAR, opts=switch_off),
    ),
    (R.MECH_BOOTS_LOWER, R.MECH_BOOTS_UPPER): Or(
        HasSwitch(Switch.MECH_BOOTS_LOWER, otherwise=True),
        can_extra_height,
    ),
    (R.MECH_BOTTOM_CAMPFIRE, R.GT_UPPER_PATH_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT, otherwise=True),
    (R.MECH_BOTTOM_CAMPFIRE, R.MECH_BOOTS_CONNECTION): HasBlue(BlueDoor.MECH_VOID, otherwise=True),
    (R.MECH_BOTTOM_CAMPFIRE, R.MECH_SNAKE): HasSwitch(Switch.MECH_SNAKE_1, otherwise=True),
    (R.MECH_BOTTOM_CAMPFIRE, R.MECH_SWORD_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT, otherwise=True),
    (R.MECH_SNAKE, R.MECH_BOTTOM_CAMPFIRE): HasSwitch(Switch.MECH_SNAKE_1),
    (R.MECH_SNAKE, R.GT_VOID): HasSwitch(Switch.MECH_SNAKE_2, otherwise=True),
    (R.MECH_LOWER_VOID, R.MECH_START): HasBlue(BlueDoor.MECH_RED, otherwise=True),
    (R.MECH_LOWER_VOID, R.MECH_UPPER_VOID): Has(KeyItem.VOID),
    (R.MECH_LOWER_VOID, R.HOTP_MECH_VOID_CONNECTION): Has(Eye.BLUE),
    (R.MECH_WATCHER, R.MECH_START): And(
        HasSwitch(Switch.MECH_CANNON),
        HasWhite(WhiteDoor.MECH_2ND),
    ),
    (R.MECH_WATCHER, R.MECH_ROOTS): Or(Has(KeyItem.CLAW), HasSwitch(Switch.MECH_WATCHER, otherwise=True)),
    (R.MECH_ROOTS, R.MECH_ZEEK_CONNECTION): HasAll(KeyItem.CLAW, KeyItem.BLOCK, KeyItem.BELL),
    (R.MECH_ROOTS, R.MECH_MUSIC): HasBlue(BlueDoor.MECH_MUSIC, otherwise=True),
    (R.MECH_BK, R.MECH_START): And(
        HasBlue(BlueDoor.MECH_SHORTCUT, otherwise=True),
        Or(Has(Character.KYULI), can_combo_height),
    ),
    (R.MECH_BK, R.MECH_AFTER_BK): Or(HasSwitch(Crystal.MECH_BK), otherwise_crystal),
    (R.MECH_BK, R.MECH_ROOTS): Or(HasSwitch(Crystal.MECH_CAMPFIRE), otherwise_crystal),
    (R.MECH_BK, R.MECH_TRIPLE_SWITCHES): And(
        can_crystal,
        HasSwitch(
            Crystal.MECH_BK,
            Switch.MECH_TO_BOSS_1,
            Crystal.MECH_TRIPLE_1,
            Crystal.MECH_TRIPLE_2,
            Crystal.MECH_TRIPLE_3,
        ),
        Or(HasWhite(WhiteDoor.MECH_BK), HasSwitch(Switch.MECH_CHAINS)),
    ),
    (R.MECH_AFTER_BK, R.MECH_CHAINS_CANDLE): Or(
        Has(KeyItem.CLAW),
        HasWhite(WhiteDoor.MECH_BK, otherwise=True),
    ),
    (R.MECH_AFTER_BK, R.MECH_CHAINS): HasSwitch(Switch.MECH_CHAINS),
    (R.MECH_AFTER_BK, R.MECH_BK): Or(
        HasSwitch(Crystal.MECH_BK),
        HardLogic(Has(ShopUpgrade.KYULI_RAY), opts=switch_off),
    ),
    (R.MECH_AFTER_BK, R.HOTP_EPIMETHEUS): Has(KeyItem.CLAW),
    (R.MECH_CHAINS, R.MECH_CHAINS_CANDLE): Has(KeyItem.CLAW),
    (R.MECH_CHAINS, R.MECH_ARIAS_EYEBALL): Has(Character.ARIAS),
    (R.MECH_CHAINS, R.MECH_SPLIT_PATH): HasSwitch(Switch.MECH_SPLIT_PATH, otherwise=True),
    (R.MECH_CHAINS, R.MECH_BOSS_SWITCHES): HasSwitch(Switch.MECH_TO_BOSS_1),
    (R.MECH_CHAINS, R.MECH_BOSS_CONNECTION): Or(
        Has(KeyItem.CLAW),
        HasSwitch(Switch.MECH_BOSS_2),
        HasSwitch(Crystal.MECH_TO_BOSS_3),
        HardLogic(Or(can_big_magic, Has(ShopUpgrade.KYULI_RAY)), opts=switch_off),
    ),
    (R.MECH_CHAINS, R.MECH_AFTER_BK): HasSwitch(Switch.MECH_CHAINS, otherwise=True),
    (R.MECH_ARIAS_EYEBALL, R.MECH_ZEEK_CONNECTION): Or(
        HasSwitch(Switch.MECH_ARIAS, otherwise=True),
        HasAll(KeyItem.STAR, KeyItem.BELL),
    ),
    (R.MECH_ARIAS_EYEBALL, R.MECH_CHAINS): And(
        HasAll(Character.ARIAS, KeyItem.BELL),
        HasAny(Character.ALGUS, ShopUpgrade.BRAM_WHIPLASH),
        Or(HasSwitch(Switch.MECH_ARIAS), Has(KeyItem.STAR)),
    ),
    (R.MECH_ZEEK_CONNECTION, R.MECH_ARIAS_EYEBALL): Or(
        HasSwitch(Switch.MECH_ARIAS),
        HasAll(KeyItem.STAR, Character.ARIAS),
    ),
    (R.MECH_ZEEK_CONNECTION, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.MECH_ZEEK_CONNECTION, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.MECH_ZEEK_CONNECTION, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.MECH_ZEEK_CONNECTION, R.TR_START): HasElevator(Elevator.TR),
    (R.MECH_ZEEK_CONNECTION, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.MECH_ZEEK_CONNECTION, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.MECH_ZEEK_CONNECTION, R.MECH_ZEEK): Or(
        HasRed(RedDoor.ZEEK),
        CanReachRegion(R.MECH_LOWER_VOID, opts=red_off),
    ),
    (R.MECH_ZEEK_CONNECTION, R.APEX): elevator_apex,
    (R.MECH_ZEEK_CONNECTION, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.MECH_ZEEK_CONNECTION, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.MECH_SPLIT_PATH, R.MECH_CHAINS): HasSwitch(Switch.MECH_SPLIT_PATH),
    (R.MECH_RIGHT, R.MECH_TRIPLE_SWITCHES): HardLogic(
        And(
            HasSwitch(
                Switch.MECH_SPLIT_PATH,
                Switch.MECH_BOSS_1,
                Crystal.MECH_TRIPLE_1,
                Crystal.MECH_TRIPLE_2,
                Crystal.MECH_TRIPLE_3,
            ),
            HasAll(KeyItem.STAR, ShopUpgrade.BRAM_WHIPLASH),
        )
    ),
    (R.MECH_RIGHT, R.MECH_OLD_MAN): Or(
        HasSwitch(Crystal.MECH_OLD_MAN),
        otherwise_crystal,
        HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL),
    ),
    (R.MECH_RIGHT, R.MECH_SPLIT_PATH): Has(KeyItem.STAR),
    (R.MECH_RIGHT, R.MECH_BELOW_POTS): Or(
        HasWhite(WhiteDoor.MECH_ARENA, otherwise=True),
        HasSwitch(Switch.MECH_EYEBALL),
    ),
    (R.MECH_RIGHT, R.MECH_UPPER_VOID): Or(
        HasSwitch(Switch.MECH_UPPER_VOID),
        And(Has(KeyItem.CLAW), HasSwitch(Switch.MECH_UPPER_VOID_DROP, otherwise=True)),
    ),
    (R.MECH_UPPER_VOID, R.MECH_RIGHT): HasSwitch(Switch.MECH_UPPER_VOID, otherwise=True),
    (R.MECH_UPPER_VOID, R.MECH_LOWER_VOID): Has(KeyItem.VOID),
    (R.MECH_BELOW_POTS, R.MECH_RIGHT): Or(
        HasWhite(WhiteDoor.MECH_ARENA),
        HasSwitch(Switch.MECH_EYEBALL, otherwise=True),
    ),
    (R.MECH_BELOW_POTS, R.MECH_POTS): HasSwitch(Switch.MECH_POTS, otherwise=True),
    (R.MECH_POTS, R.MECH_BELOW_POTS): HasSwitch(Switch.MECH_POTS),
    (R.MECH_POTS, R.MECH_TOP): HasSwitch(Switch.MECH_POTS, otherwise=True),
    (R.MECH_TOP, R.MECH_POTS): HasSwitch(Switch.MECH_POTS),
    (R.MECH_TOP, R.MECH_TP_CONNECTION): Or(
        Has(KeyItem.CLAW),
        Or(
            HasWhite(WhiteDoor.MECH_TOP),
            And(can_extra_height, Or(HasSwitch(Crystal.MECH_TOP), otherwise_crystal), opts=white_off),
        ),
    ),
    (R.MECH_TOP, R.MECH_CD_ACCESS): And(
        Has(Eye.BLUE),
        HasBlue(BlueDoor.MECH_CD, otherwise=True),
        Or(
            HasSwitch(Crystal.MECH_TO_CD),
            otherwise_crystal,
            HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL),
        ),
    ),
    (R.MECH_CD_ACCESS, R.CD_START): Has(KeyItem.CYCLOPS),
    (R.MECH_TOP, R.MECH_TRIPLE_SWITCHES): And(
        can_crystal,
        Or(HasSwitch(Switch.MECH_ARIAS_CYCLOPS), Has(Character.ARIAS, opts=switch_off)),
        Or(
            HasWhite(WhiteDoor.MECH_TOP),
            And(can_extra_height, Or(HasSwitch(Crystal.MECH_TOP), otherwise_crystal), opts=white_off),
            HasAll(KeyItem.CLAW, KeyItem.BELL),
        ),
    ),
    (R.MECH_TP_CONNECTION, R.HOTP_FALL_BOTTOM): Or(Has(KeyItem.CLAW), HasSwitch(Switch.MECH_MAZE_BACKDOOR)),
    (R.MECH_TP_CONNECTION, R.MECH_TOP): Or(Has(KeyItem.CLAW), HasWhite(WhiteDoor.MECH_TOP)),
    (R.MECH_TP_CONNECTION, R.MECH_CHARACTER_SWAPS): Or(
        And(
            Has(Character.ARIAS),
            Or(HasWhite(WhiteDoor.MECH_TOP, otherwise=True), Has(KeyItem.BELL)),
        ),
        HasSwitch(Switch.MECH_ARIAS_CYCLOPS),
    ),
    (R.MECH_CHARACTER_SWAPS, R.MECH_CLOAK_CONNECTION): And(
        Or(
            HasSwitch(Crystal.MECH_TRIPLE_1, Crystal.MECH_TRIPLE_1, Crystal.MECH_TRIPLE_1),
            otherwise_crystal,
        ),
        can_extra_height,
    ),
    (R.MECH_CHARACTER_SWAPS, R.MECH_TP_CONNECTION): Or(
        Has(Character.ARIAS),
        HasSwitch(Switch.MECH_ARIAS_CYCLOPS, otherwise=True),
    ),
    (R.MECH_CLOAK_CONNECTION, R.MECH_CHARACTER_SWAPS): HasSwitch(
        Crystal.MECH_TRIPLE_1,
        Crystal.MECH_TRIPLE_2,
        Crystal.MECH_TRIPLE_3,
    ),
    (R.MECH_CLOAK_CONNECTION, R.MECH_CLOAK): And(
        Has(Eye.BLUE),
        Or(HasSwitch(Crystal.MECH_CLOAK), otherwise_crystal),
    ),
    (R.MECH_BOSS_SWITCHES, R.MECH_CLOAK_CONNECTION): Or(
        HasSwitch(Switch.MECH_BLOCK_STAIRS),
        HasSwitch(Crystal.MECH_SLIMES),
        otherwise_crystal,
    ),
    (R.MECH_BOSS_SWITCHES, R.MECH_CHAINS): HasSwitch(Switch.MECH_TO_BOSS_1, otherwise=True),
    (R.MECH_BOSS_SWITCHES, R.MECH_BOSS_CONNECTION): HasSwitch(
        Switch.MECH_TO_BOSS_1,
        Switch.MECH_TO_BOSS_2,
        otherwise=True,
    ),
    (R.MECH_BOSS_CONNECTION, R.MECH_BOSS): Or(
        HasSwitch(Switch.MECH_BOSS_2, otherwise=True),
        And(HasAll(KeyItem.BLOCK, KeyItem.BELL), Or(Has(Character.KYULI), can_uppies)),
    ),
    (R.MECH_BOSS_CONNECTION, R.MECH_BRAM_TUNNEL_CONNECTION): HasSwitch(Switch.MECH_BOSS_1, otherwise=True),
    (R.MECH_BRAM_TUNNEL_CONNECTION, R.MECH_BOSS_CONNECTION): HasSwitch(Switch.MECH_BOSS_1),
    (R.MECH_BRAM_TUNNEL_CONNECTION, R.MECH_BRAM_TUNNEL): Has(KeyItem.STAR),
    (R.MECH_BRAM_TUNNEL, R.MECH_BRAM_TUNNEL_CONNECTION): Has(KeyItem.STAR),
    (R.MECH_BRAM_TUNNEL, R.HOTP_START_BOTTOM): Has(KeyItem.STAR),
    (R.MECH_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.MECH_BOSS, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.MECH_BOSS, R.TR_START): HasElevator(Elevator.TR),
    (R.MECH_BOSS, R.MECH_TRIPLE_SWITCHES): And(
        can_crystal,
        HasSwitch(Switch.MECH_TO_BOSS_1, Crystal.MECH_TRIPLE_1, Crystal.MECH_TRIPLE_2, Crystal.MECH_TRIPLE_3),
    ),
    (R.MECH_BOSS, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.MECH_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.MECH_BOSS, R.APEX): elevator_apex,
    (R.MECH_BOSS, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.MECH_BOSS, R.HOTP_START): Has(Eye.BLUE),
    (R.MECH_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.MECH_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.HOTP_START, R.MECH_BOSS): Has(Eye.BLUE),
    (R.HOTP_START, R.HOTP_START_BOTTOM): Or(
        Has(KeyItem.STAR),
        And(
            Or(HasWhite(WhiteDoor.HOTP_START), CanReachRegion(R.HOTP_START_LEFT, opts=white_off)),
            Has(Eye.BLUE),
        ),
    ),
    (R.HOTP_START, R.HOTP_START_MID): HasSwitch(Switch.HOTP_1ST_ROOM, otherwise=True),
    (R.HOTP_START_MID, R.HOTP_START_LEFT): Or(
        HasSwitch(Switch.HOTP_LEFT_3, otherwise=True),
        And(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_LEFT_1, Switch.HOTP_LEFT_2, otherwise=True)),
    ),
    (R.HOTP_START_MID, R.HOTP_START_BOTTOM_MID): HasSwitch(Switch.HOTP_GHOSTS, otherwise=True),
    (R.HOTP_START_MID, R.HOTP_LOWER_VOID): HardLogic(HasAny(Character.ALGUS, ShopUpgrade.BRAM_WHIPLASH)),
    (R.HOTP_LOWER_VOID, R.HOTP_UPPER_VOID): HasAll(KeyItem.VOID, KeyItem.CLAW),
    (R.HOTP_START_LEFT, R.HOTP_ELEVATOR): HasSwitch(Switch.HOTP_LEFT_BACKTRACK),
    (R.HOTP_START_LEFT, R.HOTP_START_MID): Or(
        HasSwitch(Switch.HOTP_LEFT_3),
        And(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_LEFT_1, Switch.HOTP_LEFT_2, otherwise=True)),
    ),
    (R.HOTP_START_BOTTOM, R.MECH_BRAM_TUNNEL): Has(KeyItem.STAR),
    (R.HOTP_START_BOTTOM, R.HOTP_START): Or(
        Has(KeyItem.STAR),
        And(HasWhite(WhiteDoor.HOTP_START), Has(Eye.BLUE)),
    ),
    (R.HOTP_START_BOTTOM, R.HOTP_START_BOTTOM_MID): HasAll(KeyItem.BLOCK, KeyItem.BELL, KeyItem.STAR),
    (R.HOTP_START_BOTTOM, R.HOTP_LOWER): Or(
        HasSwitch(Switch.HOTP_BELOW_START),
        CanReachRegion(R.HOTP_START_BOTTOM_MID, opts=switch_off),
    ),
    (R.HOTP_START_BOTTOM_MID, R.HOTP_START_MID): HasSwitch(Switch.HOTP_GHOSTS),
    (R.HOTP_START_BOTTOM_MID, R.HOTP_START_BOTTOM): Has(KeyItem.STAR),
    (R.HOTP_LOWER, R.HOTP_START_BOTTOM): HasSwitch(Switch.HOTP_BELOW_START),
    (R.HOTP_LOWER, R.HOTP_EPIMETHEUS): HasBlue(BlueDoor.HOTP_STATUE, otherwise=True),
    (R.HOTP_LOWER, R.HOTP_TP_TUTORIAL): Or(
        HasSwitch(Crystal.HOTP_LOWER),
        HasSwitch(Switch.HOTP_LOWER_SHORTCUT),
        otherwise_crystal,
    ),
    (R.HOTP_LOWER, R.HOTP_MECH_VOID_CONNECTION): Or(
        HasSwitch(Crystal.HOTP_BOTTOM),
        HardLogic(Has(ShopUpgrade.KYULI_RAY), opts=switch_off),
    ),
    (R.HOTP_EPIMETHEUS, R.MECH_AFTER_BK): Has(KeyItem.CLAW),
    (R.HOTP_MECH_VOID_CONNECTION, R.HOTP_AMULET_CONNECTION): Or(
        HasSwitch(Crystal.HOTP_ROCK_ACCESS),
        otherwise_crystal,
    ),
    (R.HOTP_MECH_VOID_CONNECTION, R.MECH_LOWER_VOID): Has(Eye.BLUE),
    (R.HOTP_MECH_VOID_CONNECTION, R.HOTP_LOWER): Or(HasSwitch(Crystal.HOTP_BOTTOM), otherwise_crystal),
    (R.HOTP_AMULET_CONNECTION, R.HOTP_AMULET): HasAll(KeyItem.CLAW, Eye.RED, Eye.BLUE),
    (R.HOTP_AMULET_CONNECTION, R.GT_BUTT): HasSwitch(Switch.HOTP_ROCK, otherwise=True),
    (R.HOTP_AMULET_CONNECTION, R.HOTP_MECH_VOID_CONNECTION): Or(
        HasSwitch(Crystal.HOTP_ROCK_ACCESS),
        otherwise_crystal,
    ),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_LOWER_ARIAS): And(Has(Character.ARIAS), Or(Has(KeyItem.BELL), can_uppies)),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_RED_KEY): HasAll(Eye.GREEN, KeyItem.CLOAK),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_CATH_CONNECTION): Has(Eye.GREEN),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_BELL): And(
        HasSwitch(Switch.HOTP_BELL_ACCESS, otherwise=True),
        Or(
            HasSwitch(Crystal.HOTP_BELL_ACCESS),
            otherwise_crystal,
            And(HasAll(KeyItem.BELL, KeyItem.BLOCK), Or(Has(Character.KYULI), can_uppies)),
            HardLogic(Has(KeyItem.CLAW)),
        ),
    ),
    (R.HOTP_CATH_CONNECTION, R.CATH_START): And(
        HasAll(KeyItem.VOID, KeyItem.CLAW),
        Or(HasRed(RedDoor.CATH), CanReachRegion(R.HOTP_RED_KEY, opts=red_off)),
    ),
    (R.HOTP_LOWER_ARIAS, R.HOTP_BELL_CAMPFIRE): Has(Character.ARIAS),
    (R.HOTP_LOWER_ARIAS, R.HOTP_GHOST_BLOOD): Or(
        HasSwitch(Switch.HOTP_TELEPORTS, otherwise=True),
        And(HasAll(KeyItem.BLOCK, KeyItem.BELL), Or(Has(Character.KYULI), can_uppies)),
    ),
    (R.HOTP_GHOST_BLOOD, R.HOTP_EYEBALL): HasSwitch(Switch.HOTP_GHOST_BLOOD, otherwise=True),
    (R.HOTP_GHOST_BLOOD, R.HOTP_WORM_SHORTCUT): HasSwitch(Switch.HOTP_EYEBALL_SHORTCUT),
    (R.HOTP_WORM_SHORTCUT, R.HOTP_GHOST_BLOOD): HasSwitch(Switch.HOTP_EYEBALL_SHORTCUT, otherwise=True),
    (R.HOTP_WORM_SHORTCUT, R.HOTP_ELEVATOR): HasSwitch(Switch.HOTP_WORM_PILLAR),
    (R.HOTP_ELEVATOR, R.HOTP_OLD_MAN): And(
        Has(KeyItem.CLOAK),
        Or(HasSwitch(Face.HOTP_OLD_MAN), otherwise_bow),
    ),
    (R.HOTP_ELEVATOR, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.HOTP_ELEVATOR, R.HOTP_TOP_LEFT): Has(KeyItem.CLAW),
    (R.HOTP_ELEVATOR, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.HOTP_ELEVATOR, R.TR_START): HasElevator(Elevator.TR),
    (R.HOTP_ELEVATOR, R.HOTP_START_LEFT): HasSwitch(Switch.HOTP_LEFT_BACKTRACK, otherwise=True),
    (R.HOTP_ELEVATOR, R.HOTP_WORM_SHORTCUT): HasSwitch(Switch.HOTP_WORM_PILLAR, otherwise=True),
    (R.HOTP_ELEVATOR, R.HOTP_SPIKE_TP_SECRET): Has(KeyItem.CHALICE),
    (R.HOTP_ELEVATOR, R.HOTP_CLAW_LEFT): Or(
        And(HasSwitch(Switch.HOTP_TO_CLAW_2, otherwise=True), can_extra_height),
        And(
            Has(KeyItem.BELL),
            Or(HasAll(KeyItem.CLAW, KeyItem.CLOAK), HasAll(Character.KYULI, KeyItem.BLOCK)),
        ),
    ),
    (R.HOTP_ELEVATOR, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.HOTP_ELEVATOR, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.HOTP_ELEVATOR, R.APEX): elevator_apex,
    (R.HOTP_ELEVATOR, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.HOTP_ELEVATOR, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.HOTP_ELEVATOR, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.HOTP_CLAW_LEFT, R.HOTP_ELEVATOR): can_extra_height,
    (R.HOTP_CLAW_LEFT, R.HOTP_TOP_LEFT): HasWhite(WhiteDoor.HOTP_CLAW, otherwise=True),
    (R.HOTP_CLAW_LEFT, R.HOTP_CLAW): Has(KeyItem.STAR),
    (R.HOTP_TOP_LEFT, R.HOTP_ABOVE_OLD_MAN): And(
        Has(Eye.GREEN),
        Or(
            HasSwitch(Switch.HOTP_TO_ABOVE_OLD_MAN, otherwise=True),
            And(HasAll(KeyItem.BLOCK, KeyItem.BELL), can_uppies),
        ),
    ),
    (R.HOTP_CLAW_CAMPFIRE, R.HOTP_CLAW): And(
        HasSwitch(Switch.HOTP_CLAW_ACCESS, otherwise=True),
        Or(Has(Character.KYULI), can_block_in_wall),
    ),
    (R.HOTP_CLAW_CAMPFIRE, R.HOTP_HEART): Or(HasSwitch(Crystal.HOTP_AFTER_CLAW), otherwise_crystal),
    (R.HOTP_CLAW, R.HOTP_CLAW_CAMPFIRE): And(Has(KeyItem.CLAW), HasSwitch(Switch.HOTP_CLAW_ACCESS)),
    (R.HOTP_CLAW, R.HOTP_CLAW_LEFT): Has(KeyItem.STAR),
    (R.HOTP_HEART, R.HOTP_CLAW_CAMPFIRE): Or(
        HasSwitch(Crystal.HOTP_AFTER_CLAW),
        HardLogic(
            Or(
                HasAll(KeyItem.CLOAK, KeyItem.BANISH, ShopUpgrade.ALGUS_ARCANIST),
                HasAll(Character.ALGUS, KeyItem.ICARUS),
                Has(ShopUpgrade.KYULI_RAY),
            ),
            opts=switch_off,
        ),
    ),
    (R.HOTP_HEART, R.HOTP_UPPER_ARIAS): Has(Character.ARIAS),
    (R.HOTP_HEART, R.HOTP_BOSS_CAMPFIRE): And(
        Has(KeyItem.CLAW),
        Or(Has(KeyItem.ICARUS), HasAll(KeyItem.BLOCK, KeyItem.BELL), HasSwitch(Crystal.HOTP_HEART)),
    ),
    (R.HOTP_UPPER_ARIAS, R.HOTP_BOSS_CAMPFIRE): Has(KeyItem.CLAW),
    (R.HOTP_BOSS_CAMPFIRE, R.MECH_TRIPLE_SWITCHES): And(
        HasAll(Eye.GREEN, KeyItem.CLOAK),
        HasSwitch(Switch.HOTP_TP_PUZZLE, Switch.MECH_ARIAS_CYCLOPS),
    ),
    (R.HOTP_BOSS_CAMPFIRE, R.HOTP_MAIDEN): And(
        HasBlue(BlueDoor.HOTP_MAIDEN, otherwise=True),
        Or(Has(KeyItem.SWORD), HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL)),
    ),
    (R.HOTP_BOSS_CAMPFIRE, R.HOTP_TP_PUZZLE): Has(Eye.GREEN),
    (R.HOTP_BOSS_CAMPFIRE, R.HOTP_BOSS): Or(
        HasWhite(WhiteDoor.HOTP_BOSS),
        Has(Character.ARIAS, opts=white_off),
    ),
    (R.HOTP_TP_PUZZLE, R.HOTP_TP_FALL_TOP): Or(
        Has(KeyItem.STAR),
        HasSwitch(Switch.HOTP_TP_PUZZLE, otherwise=True),
    ),
    (R.HOTP_TP_FALL_TOP, R.HOTP_FALL_BOTTOM): Has(KeyItem.CLOAK),
    (R.HOTP_TP_FALL_TOP, R.HOTP_TP_PUZZLE): Or(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_TP_PUZZLE)),
    (R.HOTP_TP_FALL_TOP, R.HOTP_GAUNTLET_CONNECTION): Has(KeyItem.CLAW),
    (R.HOTP_TP_FALL_TOP, R.HOTP_BOSS_CAMPFIRE): Or(
        Has(Character.KYULI),
        And(Has(KeyItem.BLOCK), can_combo_height),
    ),
    (R.HOTP_GAUNTLET_CONNECTION, R.HOTP_GAUNTLET): And(HasAll(KeyItem.CLAW, KeyItem.BELL), can_kill_ghosts),
    (R.HOTP_FALL_BOTTOM, R.HOTP_TP_FALL_TOP): Has(KeyItem.CLAW),
    (R.HOTP_FALL_BOTTOM, R.HOTP_UPPER_VOID): Has(Eye.GREEN),
    (R.HOTP_UPPER_VOID, R.HOTP_FALL_BOTTOM): Has(Eye.GREEN),
    (R.HOTP_UPPER_VOID, R.HOTP_LOWER_VOID): Has(KeyItem.VOID),
    (R.HOTP_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.HOTP_BOSS, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.HOTP_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.HOTP_BOSS, R.TR_START): HasElevator(Elevator.TR),
    (R.HOTP_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.HOTP_BOSS, R.APEX): elevator_apex,
    (R.HOTP_BOSS, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.HOTP_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.HOTP_BOSS, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.ROA_START, R.ROA_WORMS): Or(
        HasSwitch(Crystal.ROA_1ST_ROOM),
        # this should be more complicated
        And(Has(KeyItem.BELL), can_crystal, opts=switch_off),
    ),
    (R.ROA_WORMS, R.ROA_START): Or(
        HasSwitch(Switch.ROA_WORMS, otherwise=True),
        HasSwitch(Crystal.ROA_1ST_ROOM),
        otherwise_crystal,
    ),
    (R.ROA_WORMS, R.ROA_WORMS_CONNECTION): Or(
        HasWhite(WhiteDoor.ROA_WORMS),
        HasSwitch(Switch.ROA_WORMS, otherwise=True, opts=white_off),
    ),
    (R.ROA_WORMS, R.ROA_LOWER_VOID_CONNECTION): Has(KeyItem.CLAW),
    (R.ROA_HEARTS, R.ROA_BOTTOM_ASCEND): HasSwitch(Switch.ROA_1ST_SHORTCUT),
    (R.ROA_WORMS_CONNECTION, R.ROA_WORMS): HasWhite(WhiteDoor.ROA_WORMS),
    (R.ROA_WORMS_CONNECTION, R.ROA_HEARTS): Or(
        HasSwitch(Switch.ROA_AFTER_WORMS, otherwise=True),
        Has(KeyItem.STAR),
    ),
    (R.ROA_HEARTS, R.ROA_WORMS_CONNECTION): Or(
        HasSwitch(Switch.ROA_AFTER_WORMS),
        And(HasAll(KeyItem.STAR, KeyItem.BELL), can_extra_height),
    ),
    (R.ROA_SPIKE_CLIMB, R.ROA_BOTTOM_ASCEND): Has(KeyItem.CLAW),
    (R.ROA_BOTTOM_ASCEND, R.ROA_TOP_ASCENT): HasWhite(WhiteDoor.ROA_ASCEND, otherwise=True),
    (R.ROA_BOTTOM_ASCEND, R.ROA_TRIPLE_REAPER): Or(
        HasSwitch(Switch.ROA_ASCEND, otherwise=True),
        HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL),
    ),
    (R.ROA_TRIPLE_REAPER, R.ROA_ARENA): Or(HasSwitch(Crystal.ROA_3_REAPERS), otherwise_crystal),
    (R.ROA_ARENA, R.ROA_FLAMES_CONNECTION): Has(KeyItem.CLAW),
    (R.ROA_ARENA, R.ROA_TRIPLE_REAPER): HasSwitch(Crystal.ROA_3_REAPERS),
    (R.ROA_ARENA, R.ROA_LOWER_VOID_CONNECTION): Has(Character.KYULI),
    (R.ROA_LOWER_VOID_CONNECTION, R.ROA_LOWER_VOID): HasSwitch(Switch.ROA_LOWER_VOID),
    (R.ROA_LOWER_VOID_CONNECTION, R.ROA_ARIAS_BABY_GORGON_CONNECTION): Or(
        Has(Character.KYULI),
        can_uppies,
        can_block_in_wall,
    ),
    (R.ROA_LOWER_VOID, R.ROA_UPPER_VOID): Has(KeyItem.VOID),
    (R.ROA_LOWER_VOID, R.ROA_LOWER_VOID_CONNECTION): HasSwitch(Switch.ROA_LOWER_VOID, otherwise=True),
    (R.ROA_ARIAS_BABY_GORGON_CONNECTION, R.ROA_ARIAS_BABY_GORGON): And(
        Has(Character.ARIAS),
        Or(HardLogic(True_()), Has(KeyItem.BELL, opts=easy)),
        Or(HasSwitch(Crystal.ROA_BABY_GORGON), otherwise_crystal),
    ),
    (R.ROA_ARIAS_BABY_GORGON_CONNECTION, R.ROA_FLAMES_CONNECTION): HasAll(KeyItem.STAR, KeyItem.BELL),
    (R.ROA_ARIAS_BABY_GORGON, R.ROA_FLAMES): And(
        HasSwitch(Switch.ROA_BABY_GORGON),
        HasAll(KeyItem.BLOCK, Character.KYULI, KeyItem.BELL),
    ),
    (R.ROA_ARIAS_BABY_GORGON, R.ROA_ARIAS_BABY_GORGON_CONNECTION): And(
        Has(Character.ARIAS),
        HasSwitch(Crystal.ROA_BABY_GORGON),
    ),
    (R.ROA_FLAMES_CONNECTION, R.ROA_WORM_CLIMB): And(
        HasBlue(BlueDoor.ROA_FLAMES, otherwise=True),
        Has(KeyItem.CLAW),
    ),
    (R.ROA_FLAMES_CONNECTION, R.ROA_LEFT_ASCENT): And(
        Or(HasSwitch(Crystal.ROA_LEFT_ASCEND), And(can_crystal, Has(KeyItem.BELL), opts=switch_off)),
        can_extra_height,
    ),
    (R.ROA_FLAMES_CONNECTION, R.ROA_ARIAS_BABY_GORGON_CONNECTION): HasAll(KeyItem.STAR),
    (R.ROA_FLAMES_CONNECTION, R.ROA_ARIAS_BABY_GORGON): HardLogic(
        HasAny(ShopUpgrade.BRAM_AXE, ShopUpgrade.KYULI_RAY),
    ),
    (R.ROA_FLAMES_CONNECTION, R.ROA_FLAMES): And(HasAll(KeyItem.GAUNTLET, KeyItem.BELL), can_extra_height),
    (R.ROA_FLAMES_CONNECTION, R.ROA_LEFT_ASCENT_CRYSTAL): And(
        HasAll(KeyItem.BELL, Character.KYULI),
        can_crystal,
    ),
    (R.ROA_FLAMES, R.ROA_ARIAS_BABY_GORGON): HasSwitch(Switch.ROA_BABY_GORGON, otherwise=True),
    (R.ROA_WORM_CLIMB, R.ROA_RIGHT_BRANCH): Has(KeyItem.CLAW),
    (R.ROA_RIGHT_BRANCH, R.ROA_MIDDLE): Has(KeyItem.STAR),
    (R.ROA_LEFT_ASCENT, R.ROA_FLAMES_CONNECTION): Or(HasSwitch(Crystal.ROA_LEFT_ASCEND), otherwise_crystal),
    (R.ROA_LEFT_ASCENT, R.ROA_TOP_ASCENT): HasSwitch(Switch.ROA_ASCEND_SHORTCUT),
    (R.ROA_LEFT_ASCENT, R.ROA_LEFT_ASCENT_CRYSTAL): Has(Character.ALGUS),
    (R.ROA_TOP_ASCENT, R.ROA_TRIPLE_SWITCH): can_extra_height,
    (R.ROA_TOP_ASCENT, R.ROA_LEFT_ASCENT): HasSwitch(Switch.ROA_ASCEND_SHORTCUT),
    (R.ROA_TOP_ASCENT, R.ROA_MIDDLE): And(can_extra_height, HasSwitch(Switch.ROA_ASCEND_SHORTCUT)),
    (R.ROA_TRIPLE_SWITCH, R.ROA_MIDDLE): And(
        Or(HasSwitch(Switch.ROA_TRIPLE_1, Switch.ROA_TRIPLE_3), otherwise_crystal),
        HasAll(KeyItem.CLAW, KeyItem.BELL),
    ),
    (R.ROA_MIDDLE, R.ROA_LEFT_SWITCH): can_extra_height,
    (R.ROA_MIDDLE, R.ROA_RIGHT_BRANCH): Has(KeyItem.STAR),
    (R.ROA_MIDDLE, R.ROA_RIGHT_SWITCH_1): Or(Has(Character.KYULI), HasSwitch(Switch.ROA_RIGHT_PATH)),
    (R.ROA_MIDDLE, R.ROA_MIDDLE_LADDER): Or(
        # this could allow more
        HasSwitch(Crystal.ROA_LADDER_L, Crystal.ROA_LADDER_R),
        And(
            can_crystal,
            CanReachRegion(R.ROA_LEFT_SWITCH),
            CanReachRegion(R.ROA_RIGHT_SWITCH_2),
            opts=switch_off,
        ),
    ),
    (R.ROA_MIDDLE, R.ROA_TOP_ASCENT): HasSwitch(Switch.ROA_ASCEND_SHORTCUT, otherwise=True),
    (R.ROA_MIDDLE, R.ROA_TRIPLE_SWITCH): HasSwitch(Switch.ROA_TRIPLE_1, Switch.ROA_TRIPLE_3),
    (R.ROA_MIDDLE, R.ROA_LEFT_BABY_GORGON): can_extra_height,
    (R.ROA_RIGHT_SWITCH_1, R.ROA_RIGHT_SWITCH_2): can_extra_height,
    (R.ROA_MIDDLE_LADDER, R.ROA_UPPER_VOID): HasSwitch(
        Switch.ROA_SHAFT_L,
        Switch.ROA_SHAFT_R,
        otherwise=True,
    ),
    (R.ROA_MIDDLE_LADDER, R.ROA_RIGHT_SWITCH_CANDLE): HasAny(
        Character.ALGUS,
        ShopUpgrade.BRAM_AXE,
        ShopUpgrade.BRAM_WHIPLASH,
    ),
    (R.ROA_UPPER_VOID, R.ROA_LOWER_VOID): Has(KeyItem.VOID),
    (R.ROA_UPPER_VOID, R.ROA_SP_CONNECTION): HasSwitch(Crystal.ROA_SHAFT, Switch.ROA_SHAFT_DOWNWARDS),
    (R.ROA_UPPER_VOID, R.ROA_SPIKE_BALLS): Or(HasSwitch(Crystal.ROA_SPIKE_BALLS), otherwise_crystal),
    (R.ROA_SPIKE_BALLS, R.ROA_SPIKE_SPINNERS): HasWhite(WhiteDoor.ROA_BALLS, otherwise=True),
    (R.ROA_SPIKE_SPINNERS, R.ROA_SPIDERS_1): HasWhite(WhiteDoor.ROA_SPINNERS, otherwise=True),
    (R.ROA_SPIKE_SPINNERS, R.ROA_SPIKE_BALLS): HasWhite(WhiteDoor.ROA_BALLS, otherwise=True),
    (R.ROA_SPIDERS_1, R.ROA_RED_KEY): Or(HasSwitch(Face.ROA_SPIDERS), otherwise_bow),
    (R.ROA_SPIDERS_1, R.ROA_SPIDERS_2): can_extra_height,
    (R.ROA_SPIDERS_2, R.ROA_BLOOD_POT_HALLWAY): HasSwitch(Switch.ROA_SPIDERS, otherwise=True),
    (R.ROA_SP_CONNECTION, R.SP_START): Or(
        HasRed(RedDoor.SP),
        And(HasAll(KeyItem.CLOAK, KeyItem.CLAW, KeyItem.BELL), CanReachRegion(R.ROA_RED_KEY), opts=red_off),
    ),
    (R.ROA_SP_CONNECTION, R.ROA_ELEVATOR): And(
        # can probably make it without claw
        Has(KeyItem.CLAW),
        HasSwitch(Switch.ROA_DARK_ROOM, otherwise=True),
    ),
    (R.ROA_ELEVATOR, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.ROA_ELEVATOR, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.ROA_ELEVATOR, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.ROA_ELEVATOR, R.TR_START): HasElevator(Elevator.TR),
    (R.ROA_ELEVATOR, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.ROA_ELEVATOR, R.ROA_ICARUS): HasSwitch(Switch.ROA_ICARUS, otherwise=True),
    (R.ROA_ELEVATOR, R.ROA_DARK_CONNECTION): Or(
        Has(KeyItem.CLAW),
        HasSwitch(Switch.ROA_ELEVATOR, otherwise=True),
    ),
    (R.ROA_ELEVATOR, R.APEX): elevator_apex,
    (R.ROA_ELEVATOR, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.ROA_ELEVATOR, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.ROA_ELEVATOR, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.ROA_DARK_CONNECTION, R.ROA_CENTAUR): HasSwitch(Switch.ROA_BLOOD_POT),
    (R.ROA_DARK_CONNECTION, R.DARK_START): can_extra_height,
    (R.DARK_START, R.DARK_END): And(Has(KeyItem.CLAW), HasSwitch(Switch.DARKNESS, otherwise=True)),
    (R.DARK_END, R.ROA_CENTAUR): Has(KeyItem.CLAW),
    (R.ROA_CENTAUR, R.ROA_DARK_CONNECTION): Or(
        HasSwitch(Switch.ROA_BLOOD_POT, otherwise=True),
        HasBlue(BlueDoor.ROA_BLOOD, otherwise=True),
    ),
    (R.ROA_CENTAUR, R.ROA_BOSS_CONNECTION): Or(
        HasSwitch(Crystal.ROA_CENTAUR),
        And(HasAll(KeyItem.BELL, Character.ARIAS), Or(can_crystal, Has(KeyItem.STAR))),
    ),
    (R.ROA_BOSS_CONNECTION, R.ROA_BOSS): HasSwitch(Switch.ROA_BOSS_ACCESS, otherwise=True),
    (R.ROA_BOSS_CONNECTION, R.ROA_CENTAUR): Or(
        HasSwitch(Crystal.ROA_CENTAUR),
        And(HasAll(KeyItem.BELL, KeyItem.STAR, Character.ARIAS), can_extra_height),
    ),
    (R.ROA_BOSS, R.ROA_APEX_CONNECTION): Has(Eye.GREEN),
    (R.ROA_BOSS, R.ROA_BOSS_CONNECTION): HasSwitch(Switch.ROA_BOSS_ACCESS),
    (R.ROA_APEX_CONNECTION, R.ROA_BOSS): Has(Eye.GREEN),
    (R.ROA_APEX_CONNECTION, R.APEX): HasSwitch(Switch.ROA_APEX_ACCESS, otherwise=True),
    (R.APEX, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.APEX, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.APEX, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.APEX, R.FINAL_BOSS): And(
        HasAll(Eye.RED, Eye.BLUE, Eye.GREEN),
        Or(HardLogic(True_()), Has(KeyItem.BELL, opts=easy)),
        HasGoal(),
    ),
    (R.APEX, R.ROA_APEX_CONNECTION): HasSwitch(Switch.ROA_APEX_ACCESS),
    (R.APEX, R.TR_START): HasElevator(Elevator.TR),
    (R.APEX, R.APEX_HEART): can_extra_height,
    (R.APEX, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.APEX, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.APEX, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.APEX, R.APEX_CENTAUR_ACCESS): And(HasBlue(BlueDoor.APEX, otherwise=True), Has(KeyItem.STAR)),
    (R.APEX, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.APEX, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.APEX_CENTAUR_ACCESS, R.APEX_CENTAUR): Has(KeyItem.ADORNED_KEY),
    (R.CAVES_START, R.CAVES_EPIMETHEUS): HasBlue(BlueDoor.CAVES, otherwise=True),
    (R.CAVES_EPIMETHEUS, R.CAVES_UPPER): Or(Has(Character.KYULI), can_block_in_wall, can_combo_height),
    (R.CAVES_EPIMETHEUS, R.CAVES_START): HasBlue(BlueDoor.CAVES, otherwise=True),
    (R.CAVES_UPPER, R.CAVES_ARENA): Or(
        HasAny(KeyItem.SWORD, ShopUpgrade.KYULI_RAY),
        And(Has(ShopUpgrade.ALGUS_METEOR), chalice_on_easy),
    ),
    (R.CAVES_UPPER, R.CAVES_LOWER): HasSwitch(Switch.CAVES_SKELETONS, otherwise=True),
    (R.CAVES_LOWER, R.CAVES_UPPER): HasSwitch(Switch.CAVES_SKELETONS),
    (R.CAVES_LOWER, R.CAVES_ITEM_CHAIN): Has(Eye.RED),
    (R.CAVES_LOWER, R.CATA_START): HasSwitch(
        Switch.CAVES_CATA_1,
        Switch.CAVES_CATA_2,
        Switch.CAVES_CATA_3,
        otherwise=True,
    ),
    (R.CATA_START, R.CATA_CLIMBABLE_ROOT): HasSwitch(Switch.CATA_1ST_ROOM, otherwise=True),
    (R.CATA_START, R.CAVES_LOWER): HasSwitch(Switch.CAVES_CATA_1, Switch.CAVES_CATA_2, Switch.CAVES_CATA_3),
    (R.CATA_CLIMBABLE_ROOT, R.CATA_TOP): And(Has(Eye.RED), HasWhite(WhiteDoor.CATA_TOP, otherwise=True)),
    (R.CATA_TOP, R.CATA_CLIMBABLE_ROOT): And(Has(Eye.RED), HasWhite(WhiteDoor.CATA_TOP, otherwise=True)),
    (R.CATA_TOP, R.CATA_ELEVATOR): HasSwitch(Switch.CATA_ELEVATOR, otherwise=True),
    (R.CATA_TOP, R.CATA_BOW_CAMPFIRE): HasSwitch(Switch.CATA_TOP, otherwise=True),
    (R.CATA_ELEVATOR, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.CATA_ELEVATOR, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.CATA_ELEVATOR, R.TR_START): HasElevator(Elevator.TR),
    (R.CATA_ELEVATOR, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.CATA_ELEVATOR, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.CATA_ELEVATOR, R.APEX): elevator_apex,
    (R.CATA_ELEVATOR, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.CATA_ELEVATOR, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.CATA_ELEVATOR, R.CATA_TOP): HasSwitch(Switch.CATA_ELEVATOR),
    (R.CATA_ELEVATOR, R.CATA_MULTI): HasBlue(BlueDoor.CATA_ORBS, otherwise=True),
    (R.CATA_ELEVATOR, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.CATA_BOW_CAMPFIRE, R.CATA_TOP): HasSwitch(Switch.CATA_TOP),
    (R.CATA_BOW_CAMPFIRE, R.CATA_BOW_CONNECTION): And(
        Has(Character.KYULI),
        HasBlue(BlueDoor.CATA_SAVE, otherwise=True),
    ),
    (R.CATA_BOW_CAMPFIRE, R.CATA_EYEBALL_BONES): Or(HasSwitch(Face.CATA_AFTER_BOW), otherwise_bow),
    (R.CATA_BOW_CONNECTION, R.CATA_BOW): And(
        HasBlue(BlueDoor.CATA_BOW, otherwise=True),
        Has(Character.KYULI),
    ),
    (R.CATA_BOW_CONNECTION, R.CATA_BOW_CAMPFIRE): HasBlue(BlueDoor.CATA_SAVE, otherwise=True),
    (R.CATA_BOW_CONNECTION, R.CATA_VERTICAL_SHORTCUT): HasSwitch(Switch.CATA_VERTICAL_SHORTCUT),
    (R.CATA_VERTICAL_SHORTCUT, R.CATA_BOW_CONNECTION): And(
        HasSwitch(Switch.CATA_VERTICAL_SHORTCUT, otherwise=True),
        Or(HasSwitch(Switch.CATA_MID_SHORTCUT, otherwise=True), HasAll(Character.KYULI, KeyItem.ICARUS)),
    ),
    (R.CATA_EYEBALL_BONES, R.CATA_SNAKE_MUSHROOMS): Has(Eye.RED),
    (R.CATA_SNAKE_MUSHROOMS, R.CATA_DEV_ROOM_CONNECTION): HasAll(KeyItem.CLAW, KeyItem.BELL, Character.ZEEK),
    (R.CATA_SNAKE_MUSHROOMS, R.CATA_EYEBALL_BONES): Has(Eye.RED),
    (R.CATA_SNAKE_MUSHROOMS, R.CATA_DOUBLE_SWITCH): And(
        HasSwitch(Switch.CATA_CLAW_2, otherwise=True),
        Or(Has(KeyItem.CLAW), HasAll(Character.KYULI, Character.ZEEK, KeyItem.BELL)),
    ),
    (R.CATA_DEV_ROOM_CONNECTION, R.CATA_DEV_ROOM): Or(
        HasRed(RedDoor.DEV_ROOM),
        And(HasAll(Character.ZEEK, Character.KYULI), CanReachRegion(R.GT_BOSS), opts=red_off),
    ),
    (R.CATA_DOUBLE_SWITCH, R.CATA_SNAKE_MUSHROOMS): HasSwitch(Switch.CATA_CLAW_2),
    (R.CATA_DOUBLE_SWITCH, R.CATA_ROOTS_CAMPFIRE): HasSwitch(
        Switch.CATA_WATER_1,
        Switch.CATA_WATER_2,
        otherwise=True,
    ),
    (R.CATA_ROOTS_CAMPFIRE, R.CATA_DOUBLE_SWITCH): HasSwitch(Switch.CATA_WATER_1, Switch.CATA_WATER_2),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_ROOTS_CAMPFIRE): Has(KeyItem.CLAW),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_BLUE_EYE_DOOR): Has(Eye.BLUE),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_ABOVE_ROOTS): Has(KeyItem.CLAW),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_POISON_ROOTS): And(
        HasBlue(BlueDoor.CATA_ROOTS, otherwise=True),
        Has(Character.KYULI),
    ),
    (R.CATA_BLUE_EYE_DOOR, R.CATA_BELOW_ROOTS_CAMPFIRE): Has(Eye.BLUE),
    (R.CATA_BLUE_EYE_DOOR, R.CATA_FLAMES_FORK): HasWhite(WhiteDoor.CATA_BLUE, otherwise=True),
    (R.CATA_FLAMES_FORK, R.CATA_VERTICAL_SHORTCUT): Or(
        HasSwitch(Switch.CATA_SHORTCUT_ACCESS, Switch.CATA_AFTER_BLUE_DOOR, otherwise=True),
        HardLogic(Has(KeyItem.CLAW)),
    ),
    (R.CATA_FLAMES_FORK, R.CATA_BLUE_EYE_DOOR): Or(
        HasWhite(WhiteDoor.CATA_BLUE, otherwise=True),
        HasSwitch(Switch.CATA_SHORTCUT_ACCESS, otherwise=True),
    ),
    (R.CATA_FLAMES_FORK, R.CATA_FLAMES): HasSwitch(Switch.CATA_FLAMES_2, otherwise=True),
    (R.CATA_FLAMES_FORK, R.CATA_CENTAUR): HasSwitch(Switch.CATA_LADDER_BLOCKS, otherwise=True),
    (R.CATA_CENTAUR, R.CATA_4_FACES): Has(KeyItem.CLAW),
    (R.CATA_CENTAUR, R.CATA_FLAMES_FORK): HasSwitch(Switch.CATA_LADDER_BLOCKS),
    (R.CATA_CENTAUR, R.CATA_BOSS): HasSwitch(Face.CATA_CAMPFIRE),
    (R.CATA_4_FACES, R.CATA_DOUBLE_DOOR): Or(HasSwitch(Face.CATA_X4), otherwise_bow),
    (R.CATA_DOUBLE_DOOR, R.CATA_4_FACES): HasSwitch(Face.CATA_X4),
    (R.CATA_DOUBLE_DOOR, R.CATA_VOID_R): And(
        Has(KeyItem.BELL),
        can_kill_ghosts,
        Or(HasSwitch(Face.CATA_DOUBLE_DOOR), otherwise_bow),
    ),
    (R.CATA_VOID_R, R.CATA_VOID_L): Has(KeyItem.VOID),
    (R.CATA_VOID_L, R.CATA_VOID_R): Has(KeyItem.VOID),
    (R.CATA_VOID_L, R.CATA_BOSS): And(HasWhite(WhiteDoor.CATA_PRISON, otherwise=True), Has(Character.KYULI)),
    (R.CATA_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.CATA_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.CATA_BOSS, R.CATA_CENTAUR): Or(HasSwitch(Face.CATA_CAMPFIRE), otherwise_bow),
    (R.CATA_BOSS, R.CATA_VOID_L): HasWhite(WhiteDoor.CATA_PRISON, otherwise=True),
    (R.CATA_BOSS, R.TR_START): Or(HasElevator(Elevator.TR), HasSwitch(Switch.TR_ELEVATOR, otherwise=True)),
    (R.CATA_BOSS, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.CATA_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.CATA_BOSS, R.APEX): elevator_apex,
    (R.CATA_BOSS, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.CATA_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.CATA_BOSS, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.TR_START, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.TR_START, R.CATA_BOSS): Or(
        HasElevator(Elevator.CATA_2),
        And(HasSwitch(Switch.TR_ELEVATOR), can_extra_height),
    ),
    (R.TR_START, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.TR_START, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.TR_START, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.TR_START, R.TR_LEFT): And(
        HasBlue(BlueDoor.TR, otherwise=True),
        Or(HasRed(RedDoor.TR), And(Has(KeyItem.CLAW), CanReachRegion(R.CATA_BOSS), opts=red_off)),
    ),
    (R.TR_START, R.APEX): elevator_apex,
    (R.TR_START, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.TR_START, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.TR_START, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.TR_START, R.TR_BRAM): Has(Eye.BLUE),
    (R.TR_LEFT, R.TR_TOP_RIGHT): HasAll(KeyItem.STAR, KeyItem.BELL),
    (R.TR_LEFT, R.TR_BOTTOM_LEFT): And(Has(KeyItem.BELL), can_kill_ghosts),
    (R.TR_BOTTOM_LEFT, R.TR_BOTTOM): Has(Eye.BLUE),
    (R.TR_TOP_RIGHT, R.TR_GOLD): And(
        HasAll(Character.ZEEK, KeyItem.BELL),
        Or(HasAny(Character.KYULI, KeyItem.BLOCK), can_uppies),
    ),
    (R.TR_TOP_RIGHT, R.TR_MIDDLE_RIGHT): Or(
        HasSwitch(Crystal.TR_GOLD),
        And(HasAll(KeyItem.BELL, KeyItem.CLAW), can_crystal, opts=switch_off),
    ),
    (R.TR_MIDDLE_RIGHT, R.TR_DARK_ARIAS): Has(Eye.GREEN),
    (R.TR_MIDDLE_RIGHT, R.TR_BOTTOM): HasSwitch(Switch.TR_BOTTOM, otherwise=True),
    (R.TR_BOTTOM, R.TR_BOTTOM_LEFT): Has(Eye.BLUE),
    (R.CD_START, R.CD_2): Or(HasSwitch(Switch.CD_1, otherwise=True), HasSwitch(Crystal.CD_BACKTRACK)),
    (R.CD_START, R.CD_BOSS): And(CanReachRegion(R.CD_ARIAS_ROUTE), CanReachRegion(R.CD_TOP)),
    (R.CD_3, R.CD_MIDDLE): HasSwitch(Switch.CD_3, otherwise=True),
    (R.CD_MIDDLE, R.CD_KYULI_ROUTE): HasSwitch(Switch.CD_CAMPFIRE, otherwise=True),
    (R.CD_MIDDLE, R.CD_ARIAS_ROUTE): Has(Character.ARIAS),
    (R.CD_KYULI_ROUTE, R.CD_CAMPFIRE_3): Has(Character.KYULI),
    (R.CD_CAMPFIRE_3, R.CD_ARENA): Or(HasSwitch(Crystal.CD_CAMPFIRE), otherwise_crystal),
    (R.CD_STEPS, R.CD_TOP): Or(HasSwitch(Crystal.CD_STEPS), otherwise_crystal),
    (R.CATH_START, R.CATH_START_LEFT): And(
        Or(
            HasSwitch(Crystal.CATH_1ST_ROOM),
            And(can_crystal, CanReachRegion(R.CATH_START_TOP_LEFT), opts=switch_off),
        ),
        Has(KeyItem.CLAW),
    ),
    (R.CATH_START_RIGHT, R.CATH_START_TOP_LEFT): HasSwitch(Switch.CATH_BOTTOM, otherwise=True),
    (R.CATH_START_TOP_LEFT, R.CATH_START_LEFT): HasSwitch(Face.CATH_L),
    (R.CATH_START_LEFT, R.CATH_TP): Or(HasSwitch(Face.CATH_R), otherwise_bow),
    (R.CATH_LEFT_SHAFT, R.CATH_SHAFT_ACCESS): And(HasSwitch(Crystal.CATH_SHAFT_ACCESS), Has(KeyItem.CLAW)),
    (R.CATH_LEFT_SHAFT, R.CATH_UNDER_CAMPFIRE): Or(HasSwitch(Crystal.CATH_SHAFT), otherwise_crystal),
    (R.CATH_UNDER_CAMPFIRE, R.CATH_CAMPFIRE_1): HasAll(Character.ZEEK, KeyItem.BELL),
    (R.CATH_CAMPFIRE_1, R.CATH_SHAFT_ACCESS): Has(Character.KYULI),
    (R.CATH_SHAFT_ACCESS, R.CATH_ORB_ROOM): HasSwitch(Switch.CATH_BESIDE_SHAFT, otherwise=True),
    (R.CATH_ORB_ROOM, R.CATH_GOLD_BLOCK): Or(
        HasSwitch(Crystal.CATH_ORBS),
        And(can_crystal, Has(KeyItem.BELL), opts=switch_off),
    ),
    (R.CATH_RIGHT_SHAFT_CONNECTION, R.CATH_RIGHT_SHAFT): HasAll(KeyItem.BELL, Character.ZEEK, KeyItem.BOW),
    (R.CATH_RIGHT_SHAFT, R.CATH_TOP): Has(KeyItem.CLAW),
    (R.CATH_TOP, R.CATH_UPPER_SPIKE_PIT): Or(
        HasSwitch(Crystal.CATH_SPIKE_PIT),
        otherwise_crystal,
        HardLogic(HasAll(KeyItem.CLOAK, KeyItem.BLOCK, KeyItem.BELL)),
    ),
    (R.CATH_TOP, R.CATH_CAMPFIRE_2): HasSwitch(Switch.CATH_TOP_CAMPFIRE, otherwise=True),
    (R.SP_START, R.SP_STAR_END): HasAll(KeyItem.BLOCK, KeyItem.BELL, KeyItem.CLAW),
    (R.SP_START, R.SP_CAMPFIRE_1): Or(HasSwitch(Crystal.SP_BLOCKS), otherwise_crystal),
    (R.SP_CAMPFIRE_1, R.SP_HEARTS): HasSwitch(Switch.SP_BUBBLES, otherwise=True),
    (R.SP_HEARTS, R.SP_CAMPFIRE_1): HasSwitch(Switch.SP_BUBBLES),
    (R.SP_HEARTS, R.SP_ORBS): HasAll(KeyItem.STAR, KeyItem.BELL, Character.KYULI),
    (R.SP_HEARTS, R.SP_FROG): HasSwitch(Switch.SP_DOUBLE_DOORS, otherwise=True),
    (R.SP_PAINTING, R.SP_HEARTS): And(HasAll(KeyItem.BELL, ShopUpgrade.ALGUS_METEOR), chalice_on_easy),
    (R.SP_PAINTING, R.SP_SHAFT): And(Has(KeyItem.CLAW), HasBlue(BlueDoor.SP, otherwise=True)),
    (R.SP_SHAFT, R.SP_PAINTING): HasBlue(BlueDoor.SP, otherwise=True),
    (R.SP_SHAFT, R.SP_STAR): And(
        HasAll(KeyItem.CLAW, KeyItem.BELL),
        Or(HasSwitch(Crystal.SP_STAR), otherwise_crystal),
    ),
    (R.SP_STAR, R.SP_SHAFT): And(
        HasAll(KeyItem.BELL, ShopUpgrade.ALGUS_METEOR),
        chalice_on_easy,
        HasSwitch(Crystal.SP_STAR),
    ),
    (R.SP_STAR, R.SP_STAR_CONNECTION): Has(KeyItem.STAR),
    (R.SP_STAR_CONNECTION, R.SP_STAR): Has(KeyItem.STAR),
    (R.SP_STAR_CONNECTION, R.SP_STAR_END): And(
        Has(KeyItem.STAR),
        Or(HasSwitch(Switch.SP_AFTER_STAR), Has(Character.ARIAS, opts=switch_off)),
    ),
    (R.SP_STAR_END, R.SP_STAR_CONNECTION): And(Has(KeyItem.STAR), HasSwitch(Switch.SP_AFTER_STAR)),
}

MAIN_LOCATION_RULES: dict[L, RuleFactory] = {
    L.GT_GORGONHEART: Or(
        HasSwitch(Switch.GT_GH, otherwise=True),
        HasAny(Character.KYULI, KeyItem.ICARUS, KeyItem.BLOCK, KeyItem.CLOAK, KeyItem.BOOTS),
    ),
    L.GT_ANCIENTS_RING: Has(Eye.RED),
    L.GT_BANISH: And(
        CanReachRegion(R.GT_BOTTOM),
        CanReachRegion(R.GT_ASCENDANT_KEY),
        CanReachRegion(R.GT_BUTT),
        HasAny(Character.ALGUS, Character.KYULI, Character.BRAM, Character.ZEEK, KeyItem.SWORD),
    ),
    L.HOTP_BELL: Or(HasSwitch(Switch.HOTP_BELL, otherwise=True), Has(Character.KYULI), can_combo_height),
    L.HOTP_CLAW: can_extra_height,
    L.HOTP_MAIDEN_RING: Or(HasSwitch(Crystal.HOTP_MAIDEN_1, Crystal.HOTP_MAIDEN_2), otherwise_crystal),
    L.TR_ADORNED_KEY: Or(
        HasSwitch(Switch.TR_ADORNED_L, Switch.TR_ADORNED_M, Switch.TR_ADORNED_R),
        And(
            HasAll(KeyItem.CLAW, Eye.RED, Character.ZEEK, KeyItem.BELL),
            CanReachRegion(R.TR_BOTTOM),
            CanReachRegion(R.TR_LEFT),
            CanReachRegion(R.TR_DARK_ARIAS),
            opts=switch_off,
        ),
    ),
    L.CATH_BLOCK: Or(HasSwitch(Crystal.CATH_TOP_L, Crystal.CATH_TOP_R), otherwise_crystal),
    L.MECH_ZEEK: Has(KeyItem.CROWN),
    L.MECH_ATTACK_VOLANTIS: Has(KeyItem.CLAW),
    L.MECH_ATTACK_STAR: Has(KeyItem.STAR),
    L.ROA_ATTACK: And(HasAll(KeyItem.STAR, KeyItem.BELL), can_extra_height),
    L.CAVES_ATTACK_RED: Has(Eye.RED),
    L.CAVES_ATTACK_BLUE: HasAll(Eye.RED, Eye.BLUE),
    L.CAVES_ATTACK_GREEN: And(HasAll(Eye.RED, Eye.BLUE), HasAny(Eye.GREEN, KeyItem.STAR)),
    L.CD_ATTACK: Or(
        HasSwitch(Switch.CD_TOP, otherwise=True),
        HasAll(KeyItem.BLOCK, KeyItem.BELL, Character.KYULI),
    ),
    L.GT_HP_1_RING: Or(
        Has(KeyItem.STAR),
        And(CanReachRegion(R.GT_UPPER_PATH), HasBlue(BlueDoor.GT_RING, otherwise=True)),
    ),
    L.GT_HP_5_KEY: Has(KeyItem.CLAW),
    L.MECH_HP_1_SWITCH: HasSwitch(Switch.MECH_INVISIBLE, otherwise=True),
    L.MECH_HP_3_CLAW: Has(KeyItem.CLAW),
    L.HOTP_HP_2_GAUNTLET: HasAll(KeyItem.CLAW, Character.ZEEK, KeyItem.BELL),
    L.HOTP_HP_5_OLD_MAN: And(
        Has(KeyItem.CLAW),
        Or(And(Has(KeyItem.BELL), can_kill_ghosts), Has(KeyItem.CHALICE)),
        HasSwitch(Switch.HOTP_ABOVE_OLD_MAN, otherwise=True),
    ),
    L.HOTP_HP_5_START: And(Has(KeyItem.CLAW), HasBlue(BlueDoor.HOTP_START, otherwise=True)),
    L.ROA_HP_2_RIGHT: And(
        HasAny(KeyItem.GAUNTLET, KeyItem.CHALICE, KeyItem.STAR),
        HasAll(KeyItem.BELL, Character.KYULI),
        Or(HasSwitch(Crystal.ROA_BRANCH_L, Crystal.ROA_BRANCH_R), otherwise_crystal),
    ),
    L.ROA_HP_5_SOLARIA: Has(Character.KYULI),
    L.APEX_HP_1_CHALICE: HasBlue(BlueDoor.APEX, otherwise=True),
    L.APEX_HP_5_HEART: HasAny(Character.KYULI, KeyItem.BLOCK),
    L.CAVES_HP_1_START: Or(Has(KeyItem.CHALICE), HasSwitch(Face.CAVES_1ST_ROOM), otherwise_bow),
    L.CATA_HP_1_ABOVE_POISON: And(
        Has(Character.KYULI),
        Or(
            HasSwitch(Crystal.CATA_POISON_ROOTS),
            And(can_crystal, Has(KeyItem.BELL), opts=switch_off),
            HasAll(KeyItem.ICARUS, KeyItem.CLAW),
        ),
    ),
    L.CATA_HP_2_GEMINI_BOTTOM: And(Has(Character.KYULI), Or(HasSwitch(Face.CATA_BOTTOM), otherwise_bow)),
    L.CATA_HP_2_GEMINI_TOP: Has(Character.KYULI),
    L.CATA_HP_2_ABOVE_GEMINI: And(
        Or(Has(KeyItem.CLAW), HasAll(KeyItem.BLOCK, KeyItem.BELL)),
        Or(HasAll(KeyItem.GAUNTLET, KeyItem.BELL), Has(KeyItem.CHALICE)),
    ),
    L.CAVES_HP_5_CHAIN: HasAll(Eye.RED, Eye.BLUE, KeyItem.STAR, KeyItem.CLAW, KeyItem.BELL),
    L.CD_HP_1: Or(
        HasSwitch(Switch.CD_TOP, otherwise=True),
        HasAll(KeyItem.BLOCK, KeyItem.BELL, Character.KYULI),
    ),
    L.CATH_HP_1_TOP_LEFT: HasAny(KeyItem.CLOAK, KeyItem.ICARUS),
    L.CATH_HP_1_TOP_RIGHT: HasAny(KeyItem.CLOAK, KeyItem.ICARUS),
    L.CATH_HP_2_CLAW: Has(KeyItem.CLAW),
    L.CATH_HP_5_BELL: HasAny(Character.KYULI, KeyItem.BLOCK, KeyItem.ICARUS, KeyItem.CLOAK),
    L.MECH_WHITE_KEY_LINUS: HasSwitch(Switch.MECH_LOWER_KEY, otherwise=True),
    L.MECH_WHITE_KEY_TOP: And(Or(HasSwitch(Crystal.MECH_TOP), otherwise_crystal), can_extra_height),
    L.ROA_WHITE_KEY_SAVE: HasSwitch(Switch.ROA_WORMS, otherwise=True),
    L.CATA_WHITE_KEY_PRISON: Or(can_extra_height, HasAny(KeyItem.CLOAK, KeyItem.ICARUS)),
    L.MECH_BLUE_KEY_BLOCKS: HasSwitch(Switch.MECH_KEY_BLOCKS, otherwise=True),
    L.MECH_BLUE_KEY_SAVE: Has(KeyItem.CLAW),
    L.MECH_BLUE_KEY_POT: Or(Has(Character.KYULI), can_combo_height),
    L.HOTP_BLUE_KEY_STATUE: Has(KeyItem.CLAW),
    L.HOTP_BLUE_KEY_AMULET: Or(Has(Character.KYULI), can_combo_height),
    L.HOTP_BLUE_KEY_LADDER: can_extra_height,
    L.HOTP_BLUE_KEY_MAZE: Or(HasSwitch(Crystal.HOTP_BELOW_PUZZLE), otherwise_crystal),
    L.ROA_BLUE_KEY_FACE: Or(HasSwitch(Face.ROA_BLUE_KEY), otherwise_bow),
    L.ROA_BLUE_KEY_FLAMES: Or(
        HasAll(KeyItem.BLOCK, Character.KYULI, KeyItem.BELL),
        CanReachEntrance(R.ROA_FLAMES, R.ROA_ARIAS_BABY_GORGON),
    ),
    L.ROA_BLUE_KEY_TOP: can_extra_height,
    L.SP_BLUE_KEY_ARIAS: Has(Character.ARIAS),
    L.GT_RED_KEY: HasAll(Character.ZEEK, Character.KYULI),
    L.ROA_RED_KEY: HasAll(KeyItem.CLOAK, KeyItem.CLAW, KeyItem.BELL),
    L.TR_RED_KEY: Has(KeyItem.CLAW),
    L.SHOP_GIFT: shop_moderate,
    L.SHOP_KNOWLEDGE: shop_cheap,
    L.SHOP_MERCY: shop_expensive,
    L.SHOP_ORB_SEEKER: shop_cheap,
    L.SHOP_CARTOGRAPHER: shop_cheap,
    L.SHOP_DEATH_ORB: shop_moderate,
    L.SHOP_DEATH_POINT: shop_moderate,
    L.SHOP_TITANS_EGO: shop_moderate,
    L.SHOP_ALGUS_ARCANIST: shop_moderate,
    L.SHOP_ALGUS_SHOCK: shop_moderate,
    L.SHOP_ALGUS_METEOR: shop_expensive,
    L.SHOP_ARIAS_GORGONSLAYER: shop_moderate,
    L.SHOP_ARIAS_LAST_STAND: shop_expensive,
    L.SHOP_ARIAS_LIONHEART: shop_moderate,
    L.SHOP_KYULI_ASSASSIN: shop_cheap,
    L.SHOP_KYULI_BULLSEYE: shop_moderate,
    L.SHOP_KYULI_RAY: shop_expensive,
    L.SHOP_ZEEK_JUNKYARD: shop_moderate,
    L.SHOP_ZEEK_ORBS: shop_moderate,
    L.SHOP_ZEEK_LOOT: shop_cheap,
    L.SHOP_BRAM_AXE: shop_expensive,
    L.SHOP_BRAM_HUNTER: shop_moderate,
    L.SHOP_BRAM_WHIPLASH: shop_moderate,
    L.GT_SWITCH_2ND_ROOM: HasWhite(WhiteDoor.GT_START, otherwise=True),
    L.GT_SWITCH_BUTT_ACCESS: can_extra_height,
    L.GT_SWITCH_UPPER_PATH_ACCESS: Or(
        HasSwitch(Switch.GT_UPPER_PATH_BLOCKS, otherwise=True),
        HasAll(Character.KYULI, KeyItem.BLOCK, Character.ZEEK, KeyItem.BELL),
    ),
    L.GT_CRYSTAL_ROTA: And(
        can_crystal,
        Or(
            Has(KeyItem.BELL),
            And(
                CanReachEntrance(R.MECH_BOTTOM_CAMPFIRE, R.GT_UPPER_PATH_CONNECTION),
                CanReachEntrance(R.GT_UPPER_PATH_CONNECTION, R.GT_UPPER_PATH),
            ),
        ),
    ),
    L.GT_CRYSTAL_OLD_MAN_1: And(
        can_crystal,
        Or(
            Has(KeyItem.BELL),
            HasSwitch(Switch.GT_UPPER_ARIAS),
            CanReachRegion(R.GT_ARIAS_SWORD_SWITCH, opts=switch_off),
        ),
    ),
    L.GT_CRYSTAL_OLD_MAN_2: And(
        can_crystal,
        HasSwitch(Crystal.GT_OLD_MAN_1, otherwise=True),
        Or(
            Has(KeyItem.BELL),
            HasSwitch(Switch.GT_UPPER_ARIAS),
            CanReachRegion(R.GT_ARIAS_SWORD_SWITCH, opts=switch_off),
        ),
    ),
    L.MECH_SWITCH_BOOTS_ACCESS: HasAny(Eye.RED, KeyItem.STAR),
    L.MECH_SWITCH_UPPER_VOID_DROP: Has(KeyItem.CLAW),
    L.MECH_SWITCH_CANNON: Or(HasSwitch(Crystal.MECH_CANNON), otherwise_crystal),
    L.MECH_SWITCH_ARIAS: Has(Character.ARIAS),
    L.MECH_CRYSTAL_CANNON: can_crystal,
    L.MECH_CRYSTAL_LINUS: can_crystal,
    L.MECH_CRYSTAL_LOWER: can_crystal,
    L.MECH_CRYSTAL_TO_BOSS_3: can_crystal,
    L.MECH_CRYSTAL_TOP: can_crystal,
    L.MECH_CRYSTAL_CLOAK: And(can_crystal, Has(Eye.BLUE)),
    L.MECH_CRYSTAL_SLIMES: can_crystal,
    L.MECH_CRYSTAL_TO_CD: And(can_crystal, Has(Eye.BLUE), HasBlue(BlueDoor.MECH_CD, otherwise=True)),
    L.MECH_CRYSTAL_CAMPFIRE: can_crystal,
    L.MECH_CRYSTAL_1ST_ROOM: can_crystal,
    L.MECH_CRYSTAL_OLD_MAN: can_crystal,
    L.MECH_CRYSTAL_TOP_CHAINS: can_crystal,
    L.MECH_CRYSTAL_BK: can_crystal,
    L.MECH_FACE_ABOVE_VOLANTIS: HasAll(KeyItem.BOW, KeyItem.CLAW),
    L.HOTP_SWITCH_LOWER_SHORTCUT: Or(HasSwitch(Crystal.HOTP_LOWER), otherwise_crystal),
    L.HOTP_SWITCH_TO_CLAW_2: Or(
        HasSwitch(Switch.HOTP_TO_CLAW_1, otherwise=True),
        And(HasSwitch(Switch.HOTP_TO_CLAW_2, otherwise=True), can_extra_height),
        Has(KeyItem.CLAW),
    ),
    L.HOTP_SWITCH_CLAW_ACCESS: Or(Has(Character.KYULI), can_block_in_wall),
    L.HOTP_SWITCH_LEFT_3: Or(
        HasSwitch(Switch.HOTP_LEFT_1, Switch.HOTP_LEFT_2, otherwise=True),
        And(Has(KeyItem.STAR), CanReachRegion(R.HOTP_START_LEFT)),
    ),
    L.HOTP_CRYSTAL_ROCK_ACCESS: can_crystal,
    L.HOTP_CRYSTAL_BOTTOM: can_crystal,
    L.HOTP_CRYSTAL_LOWER: can_crystal,
    L.HOTP_CRYSTAL_AFTER_CLAW: can_crystal,
    L.HOTP_CRYSTAL_MAIDEN_1: can_crystal,
    L.HOTP_CRYSTAL_MAIDEN_2: And(
        can_crystal,
        Or(HasSwitch(Crystal.HOTP_MAIDEN_1, otherwise=True), Has(Character.KYULI)),
    ),
    L.HOTP_CRYSTAL_BELL_ACCESS: can_crystal,
    L.HOTP_CRYSTAL_HEART: can_crystal,
    L.HOTP_CRYSTAL_BELOW_PUZZLE: can_crystal,
    L.HOTP_FACE_OLD_MAN: Has(KeyItem.BOW),
    L.ROA_SWITCH_SPIKE_CLIMB: Has(KeyItem.CLAW),
    L.ROA_SWITCH_TRIPLE_3: Or(HasSwitch(Crystal.ROA_TRIPLE_2), otherwise_crystal),
    L.ROA_CRYSTAL_1ST_ROOM: And(can_crystal, HasAll(Character.KYULI, KeyItem.BELL)),
    L.ROA_CRYSTAL_BABY_GORGON: can_crystal,
    L.ROA_CRYSTAL_LADDER_R: And(
        can_crystal_wo_whiplash,
        Or(Has(KeyItem.BELL), HardLogic(Has(ShopUpgrade.KYULI_RAY))),
    ),
    L.ROA_CRYSTAL_LADDER_L: And(
        can_crystal_wo_whiplash,
        Or(Has(KeyItem.BELL), HardLogic(Has(ShopUpgrade.KYULI_RAY))),
    ),
    L.ROA_CRYSTAL_CENTAUR: And(can_crystal, HasAll(KeyItem.BELL, Character.ARIAS)),
    L.ROA_CRYSTAL_SPIKE_BALLS: can_crystal,
    L.ROA_CRYSTAL_SHAFT: can_crystal,
    L.ROA_CRYSTAL_BRANCH_R: And(can_crystal, HasAll(Character.KYULI, KeyItem.BELL)),
    L.ROA_CRYSTAL_BRANCH_L: And(can_crystal, HasAll(Character.KYULI, KeyItem.BELL)),
    L.ROA_CRYSTAL_3_REAPERS: can_crystal,
    L.ROA_CRYSTAL_TRIPLE_2: And(can_crystal, HasSwitch(Switch.ROA_TRIPLE_1, otherwise=True)),
    L.ROA_FACE_SPIDERS: Has(KeyItem.BOW),
    L.ROA_FACE_BLUE_KEY: Has(KeyItem.BOW),
    L.DARK_SWITCH: Has(KeyItem.CLAW),
    L.CAVES_FACE_1ST_ROOM: Has(KeyItem.BOW),
    L.CATA_SWITCH_CLAW_2: HasSwitch(Switch.CATA_CLAW_1, otherwise=True),
    L.CATA_SWITCH_FLAMES_2: HasSwitch(Switch.CATA_FLAMES_1, otherwise=True),
    L.CATA_CRYSTAL_POISON_ROOTS: can_crystal,
    L.CATA_FACE_AFTER_BOW: Has(KeyItem.BOW),
    L.CATA_FACE_BOW: Has(KeyItem.BOW),
    L.CATA_FACE_X4: Has(KeyItem.BOW),
    L.CATA_FACE_CAMPFIRE: Has(KeyItem.BOW),
    L.CATA_FACE_DOUBLE_DOOR: Has(KeyItem.BOW),
    L.CATA_FACE_BOTTOM: Has(KeyItem.BOW),
    L.TR_SWITCH_ADORNED_L: Has(KeyItem.CLAW),
    L.TR_SWITCH_ADORNED_M: Has(Eye.RED),
    L.TR_SWITCH_ADORNED_R: And(
        HasSwitch(Crystal.TR_DARK_ARIAS, otherwise=True),
        HasAll(Character.ZEEK, KeyItem.BELL, KeyItem.CLAW),
    ),
    L.TR_CRYSTAL_GOLD: And(can_crystal, HasAll(KeyItem.BELL, KeyItem.CLAW)),
    L.TR_CRYSTAL_DARK_ARIAS: And(can_crystal, HasAll(Character.ZEEK, KeyItem.BELL, KeyItem.CLAW)),
    L.CD_SWITCH_1: Or(HasSwitch(Crystal.CD_START), otherwise_crystal),
    L.CD_CRYSTAL_BACKTRACK: can_crystal,
    L.CD_CRYSTAL_START: can_crystal,
    L.CD_CRYSTAL_CAMPFIRE: can_crystal,
    L.CD_CRYSTAL_STEPS: can_crystal,
    L.CATH_CRYSTAL_1ST_ROOM: can_crystal,
    L.CATH_CRYSTAL_SHAFT: can_crystal,
    L.CATH_CRYSTAL_SPIKE_PIT: can_crystal,
    L.CATH_CRYSTAL_TOP_L: can_crystal,
    L.CATH_CRYSTAL_TOP_R: can_crystal,
    L.CATH_CRYSTAL_SHAFT_ACCESS: can_crystal,
    L.CATH_CRYSTAL_ORBS: can_crystal,
    L.CATH_FACE_LEFT: Has(KeyItem.BOW),
    L.CATH_FACE_RIGHT: Has(KeyItem.BOW),
    L.SP_SWITCH_AFTER_STAR: Has(Character.ARIAS),
    L.SP_CRYSTAL_BLOCKS: can_crystal,
    L.SP_CRYSTAL_STAR: can_crystal,
    L.ROA_CANDLE_ARENA: Or(
        can_extra_height,
        Has(ShopUpgrade.BRAM_AXE),
        CanReachRegion(R.ROA_FLAMES_CONNECTION),
    ),
    L.ROA_CANDLE_HIDDEN_4: HasAny(Character.KYULI, ShopUpgrade.BRAM_AXE),
    L.ROA_CANDLE_HIDDEN_5: Has(Character.KYULI),
    L.CATA_CANDLE_DEV_ROOM: Or(Has(KeyItem.CLAW), HasSwitch(Switch.CATA_DEV_ROOM, otherwise=True)),
    L.CATA_CANDLE_PRISON: HasBlue(BlueDoor.CATA_PRISON_RIGHT, otherwise=True),
}
