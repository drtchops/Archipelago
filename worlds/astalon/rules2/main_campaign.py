from typing import Dict, Tuple

from ..items import BlueDoor, Character, Crystal, Elevator, Eye, Face, KeyItem, RedDoor, ShopUpgrade, Switch, WhiteDoor
from ..regions import RegionName as R
from .base import (
    And,
    CanReach,
    False_,
    Has,
    HasAll,
    HasAny,
    HasBlue,
    HasElevator,
    HasGoal,
    HasRed,
    HasSwitch,
    HasWhite,
    Or,
    Rule,
    True_,
)

easy = (("difficulty", 0),)
hard = (("difficulty", 1),)
characters_off = (("randomize_characters", 0),)
characters_on = (("randomize_characters__gt", 0),)
white_off = (("randomize_white_keys", 0),)
white_on = (("randomize_white_keys", 1),)
blue_off = (("randomize_blue_keys", 0),)
blue_on = (("randomize_blue_keys", 1),)
red_off = (("randomize_red_keys", 0),)
red_on = (("randomize_red_keys", 1),)
switch_off = (("randomize_switches", 0),)
switch_on = (("randomize_switches", 1),)

true = True_()
false = False_()

can_uppies = Or(True_(opts=characters_off), HasAny(Character.ARIAS, Character.BRAM, opts=characters_on), opts=hard)
can_extra_height = Or(HasAny(Character.KYULI, KeyItem.BLOCK), can_uppies)
can_extra_height_gold_block = Or(HasAny(Character.KYULI, Character.ZEEK), can_uppies)
can_combo_height = And(can_uppies, HasAll(KeyItem.BELL, KeyItem.BLOCK))
can_block_in_wall = HasAll(Character.ZEEK, KeyItem.BLOCK, opts=hard)
can_crystal = Or(
    HasAny(Character.ALGUS, KeyItem.BLOCK),
    HasAll(Character.ZEEK, KeyItem.BANISH),
    Has(ShopUpgrade.KYULI_RAY, opts=hard),
)
can_crystal_whiplash = Or(can_crystal, Has(ShopUpgrade.BRAM_WHIPLASH))
can_big_magic = HasAll(Character.ALGUS, KeyItem.BANISH, ShopUpgrade.ALGUS_ARCANIST, opts=hard)
can_kill_ghosts = Or(
    HasAny(KeyItem.BANISH, KeyItem.BLOCK),
    HasAll(ShopUpgrade.ALGUS_METEOR, KeyItem.CHALICE, opts=easy),
    Has(ShopUpgrade.ALGUS_METEOR, opts=hard),
)

otherwise_crystal = Or(
    HasAny(Character.ALGUS, KeyItem.BLOCK),
    HasAll(Character.ZEEK, KeyItem.BANISH),
    Has(ShopUpgrade.KYULI_RAY, opts=hard),
    opts=switch_off,
)
otherwise_bow = Has(KeyItem.BOW, opts=switch_off)
chalice_on_easy = Or(True_(opts=hard), Has(KeyItem.CHALICE, opts=easy))

elevator_apex = Or(
    HasElevator(Elevator.APEX, opts=(("apex_elevator", 1),)),
    Has(KeyItem.ASCENDANT_KEY, opts=(("apex_elevator", 0),)),
)

MAIN_ENTRANCE_RULES: Dict[Tuple[R, R], Rule] = {
    (R.SHOP, R.SHOP_ALGUS): Has(Character.ALGUS),
    (R.SHOP, R.SHOP_ARIAS): Has(Character.ARIAS),
    (R.SHOP, R.SHOP_KYULI): Has(Character.KYULI),
    (R.SHOP, R.SHOP_ZEEK): Has(Character.ZEEK),
    (R.SHOP, R.SHOP_BRAM): Has(Character.BRAM),
    (R.GT_ENTRANCE, R.GT_BESTIARY): HasBlue(BlueDoor.GT_HUNTER, otherwise=True),
    (R.GT_ENTRANCE, R.GT_BABY_GORGON): And(
        Has(Eye.GREEN),
        Or(
            Has(KeyItem.CLAW),
            And(
                Has(Character.ZEEK),
                Or(HasAll(Character.KYULI, KeyItem.BELL), Has(KeyItem.BLOCK)),
                opts=hard,
            ),
        ),
    ),
    (R.GT_ENTRANCE, R.GT_BOTTOM): Or(
        HasSwitch(Switch.GT_2ND_ROOM),
        HasWhite(WhiteDoor.GT_START, otherwise=True, opts=switch_off),
    ),
    (R.GT_ENTRANCE, R.GT_VOID): Has(KeyItem.VOID),
    (R.GT_ENTRANCE, R.GT_GORGONHEART): Or(HasSwitch(Switch.GT_GH_SHORTCUT), HasAny(KeyItem.ICARUS, KeyItem.BOOTS)),
    (R.GT_ENTRANCE, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.GT_ENTRANCE, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.GT_ENTRANCE, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.GT_ENTRANCE, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.GT_ENTRANCE, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.GT_ENTRANCE, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.GT_ENTRANCE, R.APEX): elevator_apex,
    (R.GT_ENTRANCE, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.GT_ENTRANCE, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.GT_ENTRANCE, R.TR_START): HasElevator(Elevator.TR),
    (R.GT_BOTTOM, R.GT_VOID): Has(Eye.RED),
    (R.GT_BOTTOM, R.GT_GORGONHEART): HasWhite(WhiteDoor.GT_MAP, otherwise=True),
    (R.GT_BOTTOM, R.GT_UPPER_PATH): Or(
        HasSwitch(Crystal.GT_ROTA),
        can_uppies,
        And(Has(KeyItem.STAR), HasBlue(BlueDoor.GT_RING, otherwise=True)),
        Has(KeyItem.BLOCK),
    ),
    (R.GT_BOTTOM, R.CAVES_START): Or(
        Has(Character.KYULI),
        HasAny(Character.ZEEK, KeyItem.BOOTS, opts=hard),
    ),
    (R.GT_VOID, R.GT_BOTTOM): Has(Eye.RED),
    (R.GT_VOID, R.MECH_SNAKE): HasSwitch(Switch.MECH_SNAKE_2),
    (R.GT_GORGONHEART, R.GT_ORBS_DOOR): HasBlue(BlueDoor.GT_ORBS, otherwise=True),
    (R.GT_GORGONHEART, R.GT_LEFT): Or(HasSwitch(Switch.GT_CROSSES), HasSwitch(Switch.GT_1ST_CYCLOPS, otherwise=True)),
    (R.GT_LEFT, R.GT_GORGONHEART): Or(HasSwitch(Switch.GT_CROSSES, otherwise=True), HasSwitch(Switch.GT_1ST_CYCLOPS)),
    (R.GT_LEFT, R.GT_ORBS_HEIGHT): can_extra_height,
    (R.GT_LEFT, R.GT_ASCENDANT_KEY): HasBlue(BlueDoor.GT_ASCENDANT, otherwise=True),
    (R.GT_LEFT, R.GT_TOP_LEFT): Or(
        HasSwitch(Switch.GT_ARIAS),
        HasAny(Character.ARIAS, KeyItem.CLAW),
        HasAll(KeyItem.BLOCK, Character.KYULI, KeyItem.BELL),
    ),
    (R.GT_LEFT, R.GT_TOP_RIGHT): can_extra_height,
    (R.GT_TOP_LEFT, R.GT_BUTT): Or(
        HasSwitch(Switch.GT_BUTT_ACCESS),
        CanReach(R.GT_SPIKE_TUNNEL_SWITCH, opts=switch_off),
    ),
    (R.GT_TOP_RIGHT, R.GT_SPIKE_TUNNEL): Or(
        HasSwitch(Switch.GT_SPIKE_TUNNEL),
        CanReach(R.GT_TOP_LEFT, opts=switch_off),
    ),
    (R.GT_SPIKE_TUNNEL, R.GT_TOP_RIGHT): HasSwitch(Switch.GT_SPIKE_TUNNEL),
    (R.GT_SPIKE_TUNNEL, R.GT_SPIKE_TUNNEL_SWITCH): can_extra_height,
    (R.GT_SPIKE_TUNNEL_SWITCH, R.GT_BUTT): Or(
        Has(KeyItem.STAR, opts=hard),
        HasAll(KeyItem.STAR, KeyItem.BELL, opts=easy),
    ),
    (R.GT_BUTT, R.GT_TOP_LEFT): HasSwitch(Switch.GT_BUTT_ACCESS),
    (R.GT_BUTT, R.GT_SPIKE_TUNNEL_SWITCH): Has(KeyItem.STAR),
    (R.GT_BUTT, R.GT_BOSS): HasWhite(WhiteDoor.GT_TAUROS, otherwise=True),
    (R.GT_BOSS, R.GT_BUTT): HasWhite(WhiteDoor.GT_TAUROS),
    (R.GT_BOSS, R.MECH_START): Has(Eye.RED),
    (R.GT_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.GT_BOSS, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.GT_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.GT_BOSS, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.GT_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.GT_BOSS, R.APEX): elevator_apex,
    (R.GT_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.GT_BOSS, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.GT_BOSS, R.TR_START): HasElevator(Elevator.TR),
    (R.GT_UPPER_ARIAS, R.GT_OLD_MAN_FORK): Or(
        HasSwitch(Crystal.GT_LADDER),
        CanReach(R.GT_LADDER_SWITCH, opts=switch_off),
    ),
    (R.GT_UPPER_ARIAS, R.MECH_SWORD_CONNECTION): Or(
        Has(Character.ARIAS),
        HasSwitch(Switch.GT_UPPER_ARIAS),
        CanReach(R.GT_ARIAS_SWORD_SWITCH, opts=switch_off),
    ),
    (R.GT_OLD_MAN_FORK, R.GT_UPPER_ARIAS): Or(
        HasSwitch(Crystal.GT_LADDER),
        CanReach(R.GT_LADDER_SWITCH, opts=switch_off),
    ),
    (R.GT_OLD_MAN_FORK, R.GT_SWORD_FORK): HasBlue(BlueDoor.GT_SWORD, otherwise=True),
    (R.GT_OLD_MAN_FORK, R.GT_OLD_MAN): Or(
        Has(KeyItem.CLAW),
        # TODO: you don't need both switches, revisit when adding old man
        HasSwitch(Crystal.GT_OLD_MAN_1, Crystal.GT_OLD_MAN_2),
        otherwise_crystal,
    ),
    (R.GT_SWORD_FORK, R.GT_SWORD): HasSwitch(Switch.GT_SWORD_ACCESS, otherwise=True),
    (R.GT_SWORD_FORK, R.GT_ARIAS_SWORD_SWITCH): Or(Has(KeyItem.SWORD), HasAll(KeyItem.BOW, KeyItem.BELL)),
    (R.GT_UPPER_PATH, R.GT_UPPER_PATH_CONNECTION): HasSwitch(Switch.GT_UPPER_PATH_ACCESS),
    (R.GT_UPPER_PATH_CONNECTION, R.GT_UPPER_PATH): HasSwitch(Switch.GT_UPPER_PATH_ACCESS, otherwise=True),
    (R.GT_UPPER_PATH_CONNECTION, R.MECH_SWORD_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.GT_UPPER_PATH_CONNECTION, R.MECH_BOTTOM_CAMPFIRE): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.MECH_START, R.GT_LADDER_SWITCH): And(Has(Eye.RED), can_crystal),
    (R.MECH_START, R.MECH_BK): And(HasBlue(BlueDoor.MECH_SHORTCUT, otherwise=True), can_extra_height),
    (R.MECH_START, R.MECH_WATCHER): And(
        Or(HasSwitch(Switch.MECH_CANNON), otherwise_crystal),
        HasWhite(WhiteDoor.MECH_2ND, otherwise=True),
    ),
    (R.MECH_START, R.MECH_LINUS): Or(HasSwitch(Crystal.MECH_LINUS), otherwise_crystal),
    (R.MECH_START, R.MECH_LOWER_VOID): HasBlue(BlueDoor.MECH_RED, otherwise=True),
    (R.MECH_START, R.MECH_SACRIFICE): can_extra_height,
    (R.MECH_START, R.GT_BOSS): Has(Eye.RED),
    (R.MECH_LINUS, R.MECH_START): Or(HasSwitch(Crystal.MECH_LINUS), otherwise_crystal),
    (R.MECH_LINUS, R.MECH_SWORD_CONNECTION): HasSwitch(Switch.MECH_LINUS, otherwise=True),
    (R.MECH_SWORD_CONNECTION, R.MECH_BOOTS_CONNECTION): And(
        HasBlue(BlueDoor.MECH_BOOTS, otherwise=True),
        Or(
            HasSwitch(Crystal.MECH_LOWER),
            otherwise_crystal,
            HasAny(KeyItem.CLAW, KeyItem.CLOAK),
            HasAll(Character.KYULI, KeyItem.ICARUS),
            Has(KeyItem.BOOTS, opts=hard),
        ),
    ),
    (R.MECH_SWORD_CONNECTION, R.GT_UPPER_PATH_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.MECH_SWORD_CONNECTION, R.MECH_LOWER_ARIAS): Has(Character.ARIAS),
    (R.MECH_SWORD_CONNECTION, R.MECH_BOTTOM_CAMPFIRE): HasSwitch(Switch.MECH_TO_UPPER_GT),
    (R.MECH_SWORD_CONNECTION, R.MECH_LINUS): HasSwitch(Switch.MECH_LINUS),
    (R.MECH_SWORD_CONNECTION, R.GT_UPPER_ARIAS): Or(Has(Character.ARIAS), HasSwitch(Switch.GT_UPPER_ARIAS)),
    (R.MECH_BOOTS_CONNECTION, R.MECH_BOTTOM_CAMPFIRE): HasBlue(BlueDoor.MECH_VOID, otherwise=True),
    (R.MECH_BOOTS_CONNECTION, R.MECH_BOOTS_LOWER): Or(
        HasSwitch(Switch.MECH_BOOTS),
        HasAny(Eye.RED, KeyItem.STAR, opts=switch_off),
    ),
    (R.MECH_BOOTS_LOWER, R.MECH_BOOTS_UPPER): Or(HasSwitch(Switch.MECH_BOOTS_LOWER, otherwise=True), can_extra_height),
    (R.MECH_BOTTOM_CAMPFIRE, R.GT_UPPER_PATH_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT, otherwise=True),
    (R.MECH_BOTTOM_CAMPFIRE, R.MECH_BOOTS_CONNECTION): HasBlue(BlueDoor.MECH_VOID, otherwise=True),
    (R.MECH_BOTTOM_CAMPFIRE, R.MECH_SNAKE): HasSwitch(Switch.MECH_SNAKE_1, otherwise=True),
    (R.MECH_BOTTOM_CAMPFIRE, R.MECH_SWORD_CONNECTION): HasSwitch(Switch.MECH_TO_UPPER_GT, otherwise=True),
    (R.MECH_SNAKE, R.MECH_BOTTOM_CAMPFIRE): HasSwitch(Switch.MECH_SNAKE_1),
    (R.MECH_SNAKE, R.GT_VOID): HasSwitch(Switch.MECH_SNAKE_2, otherwise=True),
    (R.MECH_LOWER_VOID, R.MECH_START): HasBlue(BlueDoor.MECH_RED, otherwise=True),
    (R.MECH_LOWER_VOID, R.MECH_UPPER_VOID): Has(KeyItem.VOID),
    (R.MECH_LOWER_VOID, R.HOTP_MECH_VOID_CONNECTION): Has(Eye.BLUE),
    (R.MECH_WATCHER, R.MECH_START): And(HasSwitch(Switch.MECH_CANNON), HasWhite(WhiteDoor.MECH_2ND, otherwise=True)),
    (R.MECH_WATCHER, R.MECH_ROOTS): Or(Has(KeyItem.CLAW), HasSwitch(Switch.MECH_WATCHER, otherwise=True)),
    (R.MECH_ROOTS, R.MECH_ZEEK_CONNECTION): HasAll(KeyItem.CLAW, KeyItem.BLOCK, KeyItem.BELL),
    (R.MECH_ROOTS, R.MECH_MUSIC): HasBlue(BlueDoor.MECH_MUSIC, otherwise=True),
    (R.MECH_BK, R.MECH_START): And(
        HasBlue(BlueDoor.MECH_SHORTCUT, otherwise=True),
        Or(Has(Character.KYULI), can_combo_height),
    ),
    (R.MECH_BK, R.MECH_AFTER_BK): Or(HasSwitch(Crystal.MECH_BK), otherwise_crystal),
    (R.MECH_BK, R.MECH_ROOTS): Or(HasSwitch(Crystal.MECH_CAMPFIRE), otherwise_crystal),
    (R.MECH_BK, R.MECH_TRIPLE_SWITCHES): And(
        can_crystal,
        HasSwitch(
            Crystal.MECH_BK,
            Switch.MECH_TO_BOSS_1,
            Crystal.MECH_TRIPLE_1,
            Crystal.MECH_TRIPLE_2,
            Crystal.MECH_TRIPLE_3,
        ),
        Or(HasWhite(WhiteDoor.MECH_BK), HasSwitch(Switch.MECH_CHAINS)),
    ),
    (R.MECH_AFTER_BK, R.MECH_CHAINS_CANDLE): Or(Has(KeyItem.CLAW), HasWhite(WhiteDoor.MECH_BK, otherwise=True)),
    (R.MECH_AFTER_BK, R.MECH_CHAINS): HasSwitch(Switch.MECH_CHAINS),
    (R.MECH_AFTER_BK, R.MECH_BK): Or(HasSwitch(Crystal.MECH_BK), Has(ShopUpgrade.KYULI_RAY, opts=switch_off + hard)),
    (R.MECH_AFTER_BK, R.HOTP_EPIMETHEUS): Has(KeyItem.CLAW),
    (R.MECH_CHAINS, R.MECH_CHAINS_CANDLE): Has(KeyItem.CLAW),
    (R.MECH_CHAINS, R.MECH_ARIAS_EYEBALL): Has(Character.ARIAS),
    (R.MECH_CHAINS, R.MECH_SPLIT_PATH): HasSwitch(Switch.MECH_SPLIT_PATH, otherwise=True),
    (R.MECH_CHAINS, R.MECH_BOSS_SWITCHES): HasSwitch(Switch.MECH_TO_BOSS_1),
    (R.MECH_CHAINS, R.MECH_BOSS_CONNECTION): Or(
        Has(KeyItem.CLAW),
        HasSwitch(Switch.MECH_BOSS_2),
        HasSwitch(Crystal.MECH_TO_BOSS_3),
        Or(can_big_magic, Has(ShopUpgrade.KYULI_RAY), opts=switch_off + hard),
    ),
    (R.MECH_CHAINS, R.MECH_AFTER_BK): HasSwitch(Switch.MECH_CHAINS, otherwise=True),
    (R.MECH_ARIAS_EYEBALL, R.MECH_ZEEK_CONNECTION): Or(
        HasSwitch(Switch.MECH_ARIAS, otherwise=True),
        HasAll(KeyItem.STAR, KeyItem.BELL),
    ),
    (R.MECH_ARIAS_EYEBALL, R.MECH_CHAINS): And(
        HasAll(Character.ARIAS, KeyItem.BELL),
        HasAny(Character.ALGUS, ShopUpgrade.BRAM_WHIPLASH),
        Or(HasSwitch(Switch.MECH_ARIAS), Has(KeyItem.STAR)),
    ),
    (R.MECH_ZEEK_CONNECTION, R.MECH_ARIAS_EYEBALL): Or(
        HasSwitch(Switch.MECH_ARIAS),
        HasAll(KeyItem.STAR, Character.ARIAS),
    ),
    (R.MECH_ZEEK_CONNECTION, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.MECH_ZEEK_CONNECTION, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.MECH_ZEEK_CONNECTION, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.MECH_ZEEK_CONNECTION, R.TR_START): HasElevator(Elevator.TR),
    (R.MECH_ZEEK_CONNECTION, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.MECH_ZEEK_CONNECTION, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.MECH_ZEEK_CONNECTION, R.MECH_ZEEK): Or(HasRed(RedDoor.ZEEK), CanReach(R.MECH_LOWER_VOID, opts=red_off)),
    (R.MECH_ZEEK_CONNECTION, R.APEX): elevator_apex,
    (R.MECH_ZEEK_CONNECTION, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.MECH_ZEEK_CONNECTION, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.MECH_SPLIT_PATH, R.MECH_CHAINS): HasSwitch(Switch.MECH_SPLIT_PATH),
    (R.MECH_RIGHT, R.MECH_TRIPLE_SWITCHES): And(
        HasSwitch(
            Switch.MECH_SPLIT_PATH,
            Switch.MECH_BOSS_1,
            Crystal.MECH_TRIPLE_1,
            Crystal.MECH_TRIPLE_2,
            Crystal.MECH_TRIPLE_3,
        ),
        HasAll(KeyItem.STAR, ShopUpgrade.BRAM_WHIPLASH),
        opts=hard,
    ),
    (R.MECH_RIGHT, R.MECH_OLD_MAN): Or(
        HasSwitch(Crystal.MECH_OLD_MAN),
        otherwise_crystal,
        HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL),
    ),
    (R.MECH_RIGHT, R.MECH_SPLIT_PATH): Has(KeyItem.STAR),
    (R.MECH_RIGHT, R.MECH_BELOW_POTS): Or(
        HasWhite(WhiteDoor.MECH_ARENA, otherwise=True),
        HasSwitch(Switch.MECH_EYEBALL),
    ),
    (R.MECH_RIGHT, R.MECH_UPPER_VOID): Or(
        HasSwitch(Switch.MECH_UPPER_VOID),
        And(Has(KeyItem.CLAW), HasSwitch(Switch.MECH_UPPER_VOID_DROP, otherwise=True)),
    ),
    (R.MECH_UPPER_VOID, R.MECH_RIGHT): HasSwitch(Switch.MECH_UPPER_VOID, otherwise=True),
    (R.MECH_UPPER_VOID, R.MECH_LOWER_VOID): Has(KeyItem.VOID),
    (R.MECH_BELOW_POTS, R.MECH_RIGHT): Or(
        HasWhite(WhiteDoor.MECH_ARENA, otherwise=True),
        HasSwitch(Switch.MECH_EYEBALL, otherwise=True),
    ),
    (R.MECH_BELOW_POTS, R.MECH_POTS): HasSwitch(Switch.MECH_POTS, otherwise=True),
    (R.MECH_POTS, R.MECH_BELOW_POTS): HasSwitch(Switch.MECH_POTS),
    (R.MECH_POTS, R.MECH_TOP): HasSwitch(Switch.MECH_POTS, otherwise=True),
    (R.MECH_TOP, R.MECH_POTS): HasSwitch(Switch.MECH_POTS),
    (R.MECH_TOP, R.MECH_TP_CONNECTION): Or(Has(KeyItem.CLAW), HasWhite(WhiteDoor.MECH_TOP, otherwise=True)),
    (R.MECH_TOP, R.MECH_CD_ACCESS): And(
        Has(Eye.BLUE),
        HasBlue(BlueDoor.MECH_CD, otherwise=True),
        Or(
            HasSwitch(Crystal.MECH_TO_CD),
            otherwise_crystal,
            HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL),
        ),
    ),
    (R.MECH_CD_ACCESS, R.CD_START): Has(KeyItem.CYCLOPS),
    (R.MECH_TOP, R.MECH_TRIPLE_SWITCHES): And(
        can_crystal,
        Or(HasSwitch(Switch.MECH_ARIAS_CYCLOPS), Has(Character.ARIAS, opts=switch_off)),
        HasWhite(WhiteDoor.MECH_TOP, otherwise=True),
    ),
    (R.MECH_TP_CONNECTION, R.HOTP_FALL_BOTTOM): Or(Has(KeyItem.CLAW), HasSwitch(Switch.MECH_MAZE_BACKDOOR)),
    (R.MECH_TP_CONNECTION, R.MECH_TOP): Or(Has(KeyItem.CLAW), HasWhite(WhiteDoor.MECH_TOP, otherwise=True)),
    (R.MECH_TP_CONNECTION, R.MECH_CHARACTER_SWAPS): Or(
        And(
            Has(Character.ARIAS),
            Or(HasWhite(WhiteDoor.MECH_TOP, otherwise=True), Has(KeyItem.BELL)),
        ),
        HasSwitch(Switch.MECH_ARIAS_CYCLOPS),
    ),
    (R.MECH_CHARACTER_SWAPS, R.MECH_CLOAK_CONNECTION): And(
        Or(
            HasSwitch(Crystal.MECH_TRIPLE_1, Crystal.MECH_TRIPLE_1, Crystal.MECH_TRIPLE_1),
            otherwise_crystal,
        ),
        can_extra_height,
    ),
    (R.MECH_CHARACTER_SWAPS, R.MECH_TP_CONNECTION): Or(
        Has(Character.ARIAS),
        HasSwitch(Switch.MECH_ARIAS_CYCLOPS, otherwise=True),
    ),
    (R.MECH_CLOAK_CONNECTION, R.MECH_CHARACTER_SWAPS): HasSwitch(
        Crystal.MECH_TRIPLE_1,
        Crystal.MECH_TRIPLE_2,
        Crystal.MECH_TRIPLE_3,
    ),
    (R.MECH_CLOAK_CONNECTION, R.MECH_CLOAK): And(
        Has(Eye.BLUE),
        Or(HasSwitch(Crystal.MECH_CLOAK), otherwise_crystal),
    ),
    (R.MECH_BOSS_SWITCHES, R.MECH_CLOAK_CONNECTION): Or(
        HasSwitch(Switch.MECH_BLOCK_STAIRS),
        HasSwitch(Crystal.MECH_SLIMES),
        otherwise_crystal,
    ),
    (R.MECH_BOSS_SWITCHES, R.MECH_CHAINS): HasSwitch(Switch.MECH_TO_BOSS_1, otherwise=True),
    (R.MECH_BOSS_SWITCHES, R.MECH_BOSS_CONNECTION): HasSwitch(
        Switch.MECH_TO_BOSS_1,
        Switch.MECH_TO_BOSS_2,
        otherwise=True,
    ),
    (R.MECH_BOSS_CONNECTION, R.MECH_BOSS): Or(
        HasSwitch(Switch.MECH_BOSS_2, otherwise=True),
        And(HasAll(KeyItem.BLOCK, KeyItem.BELL), Or(Has(Character.KYULI), can_uppies)),
    ),
    (R.MECH_BOSS_CONNECTION, R.MECH_BRAM_TUNNEL_CONNECTION): HasSwitch(Switch.MECH_BOSS_1, otherwise=True),
    (R.MECH_BRAM_TUNNEL_CONNECTION, R.MECH_BOSS_CONNECTION): HasSwitch(Switch.MECH_BOSS_1),
    (R.MECH_BRAM_TUNNEL_CONNECTION, R.MECH_BRAM_TUNNEL): Has(KeyItem.STAR),
    (R.MECH_BRAM_TUNNEL, R.MECH_BRAM_TUNNEL_CONNECTION): Has(KeyItem.STAR),
    (R.MECH_BRAM_TUNNEL, R.HOTP_START_BOTTOM): Has(KeyItem.STAR),
    (R.MECH_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.MECH_BOSS, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.MECH_BOSS, R.TR_START): HasElevator(Elevator.TR),
    (R.MECH_BOSS, R.MECH_TRIPLE_SWITCHES): And(
        can_crystal,
        HasSwitch(Switch.MECH_TO_BOSS_1, Crystal.MECH_TRIPLE_1, Crystal.MECH_TRIPLE_2, Crystal.MECH_TRIPLE_3),
    ),
    (R.MECH_BOSS, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.MECH_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.MECH_BOSS, R.APEX): elevator_apex,
    (R.MECH_BOSS, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.MECH_BOSS, R.HOTP_START): Has(Eye.BLUE),
    (R.MECH_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.MECH_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.HOTP_START, R.MECH_BOSS): Has(Eye.BLUE),
    (R.HOTP_START, R.HOTP_START_BOTTOM): Or(
        Has(KeyItem.STAR),
        And(HasWhite(WhiteDoor.HOTP_START, otherwise=True), Has(Eye.BLUE)),
    ),
    (R.HOTP_START, R.HOTP_START_MID): HasSwitch(Switch.HOTP_1ST_ROOM, otherwise=True),
    (R.HOTP_START_MID, R.HOTP_START_LEFT): Or(
        HasSwitch(Switch.HOTP_LEFT_3, otherwise=True),
        And(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_LEFT_1, Switch.HOTP_LEFT_2, otherwise=True)),
    ),
    (R.HOTP_START_MID, R.HOTP_START_BOTTOM_MID): HasSwitch(Switch.HOTP_GHOSTS, otherwise=True),
    (R.HOTP_START_MID, R.HOTP_LOWER_VOID): HasAny(Character.ALGUS, ShopUpgrade.BRAM_WHIPLASH, opts=hard),
    (R.HOTP_LOWER_VOID, R.HOTP_UPPER_VOID): HasAll(KeyItem.VOID, KeyItem.CLAW),
    (R.HOTP_START_LEFT, R.HOTP_ELEVATOR): HasSwitch(Switch.HOTP_LEFT_BACKTRACK),
    (R.HOTP_START_LEFT, R.HOTP_START_MID): Or(
        HasSwitch(Switch.HOTP_LEFT_3),
        And(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_LEFT_1, Switch.HOTP_LEFT_2, otherwise=True)),
    ),
    (R.HOTP_START_BOTTOM, R.MECH_BRAM_TUNNEL): Has(KeyItem.STAR),
    (R.HOTP_START_BOTTOM, R.HOTP_START): Or(
        Has(KeyItem.STAR),
        And(HasWhite(WhiteDoor.HOTP_START, otherwise=True), Has(Eye.BLUE)),
    ),
    (R.HOTP_START_BOTTOM, R.HOTP_START_BOTTOM_MID): HasAll(KeyItem.BLOCK, KeyItem.BELL, KeyItem.STAR),
    (R.HOTP_START_BOTTOM, R.HOTP_LOWER): Or(
        HasSwitch(Switch.HOTP_BELOW_START),
        CanReach(R.HOTP_START_BOTTOM_MID, opts=switch_off),
    ),
    (R.HOTP_START_BOTTOM_MID, R.HOTP_START_MID): HasSwitch(Switch.HOTP_GHOSTS),
    (R.HOTP_START_BOTTOM_MID, R.HOTP_START_BOTTOM): Has(KeyItem.STAR),
    (R.HOTP_LOWER, R.HOTP_START_BOTTOM): HasSwitch(Switch.HOTP_BELOW_START),
    (R.HOTP_LOWER, R.HOTP_EPIMETHEUS): HasBlue(BlueDoor.HOTP_STATUE, otherwise=True),
    (R.HOTP_LOWER, R.HOTP_TP_TUTORIAL): Or(
        HasSwitch(Crystal.HOTP_LOWER),
        HasSwitch(Switch.HOTP_LOWER_SHORTCUT),
        otherwise_crystal,
    ),
    (R.HOTP_LOWER, R.HOTP_MECH_VOID_CONNECTION): Or(
        HasSwitch(Crystal.HOTP_BOTTOM),
        Has(ShopUpgrade.KYULI_RAY, opts=hard + switch_off),
    ),
    (R.HOTP_EPIMETHEUS, R.MECH_AFTER_BK): Has(KeyItem.CLAW),
    (R.HOTP_MECH_VOID_CONNECTION, R.HOTP_AMULET_CONNECTION): Or(
        HasSwitch(Crystal.HOTP_ROCK_ACCESS),
        otherwise_crystal,
    ),
    (R.HOTP_MECH_VOID_CONNECTION, R.MECH_LOWER_VOID): Has(Eye.BLUE),
    (R.HOTP_MECH_VOID_CONNECTION, R.HOTP_LOWER): Or(HasSwitch(Crystal.HOTP_BOTTOM), otherwise_crystal),
    (R.HOTP_AMULET_CONNECTION, R.HOTP_AMULET): HasAll(KeyItem.CLAW, Eye.RED, Eye.BLUE),
    (R.HOTP_AMULET_CONNECTION, R.GT_BUTT): HasSwitch(Switch.HOTP_ROCK, otherwise=True),
    (R.HOTP_AMULET_CONNECTION, R.HOTP_MECH_VOID_CONNECTION): Or(
        HasSwitch(Crystal.HOTP_ROCK_ACCESS),
        otherwise_crystal,
    ),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_LOWER_ARIAS): And(Has(Character.ARIAS), Or(Has(KeyItem.BELL), can_uppies)),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_RED_KEY): HasAll(Eye.GREEN, KeyItem.CLOAK),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_CATH_CONNECTION): Has(Eye.GREEN),
    (R.HOTP_BELL_CAMPFIRE, R.HOTP_BELL): And(
        HasSwitch(Switch.HOTP_BELL_ACCESS, otherwise=True),
        Or(
            HasSwitch(Crystal.HOTP_BELL_ACCESS),
            otherwise_crystal,
            And(HasAll(KeyItem.BELL, KeyItem.BLOCK), Or(Has(Character.KYULI), can_uppies)),
            Has(KeyItem.CLAW, opts=hard),
        ),
    ),
    (R.HOTP_CATH_CONNECTION, R.CATH_START): And(
        HasAll(KeyItem.VOID, KeyItem.CLAW),
        Or(HasRed(RedDoor.CATH), CanReach(R.HOTP_RED_KEY, opts=red_off)),
    ),
    (R.HOTP_LOWER_ARIAS, R.HOTP_BELL_CAMPFIRE): Has(Character.ARIAS),
    (R.HOTP_LOWER_ARIAS, R.HOTP_GHOST_BLOOD): Or(
        HasSwitch(Switch.HOTP_TELEPORTS, otherwise=True),
        And(HasAll(KeyItem.BLOCK, KeyItem.BELL), Or(Has(Character.KYULI), can_uppies)),
    ),
    (R.HOTP_GHOST_BLOOD, R.HOTP_EYEBALL): HasSwitch(Switch.HOTP_GHOST_BLOOD, otherwise=True),
    (R.HOTP_GHOST_BLOOD, R.HOTP_WORM_SHORTCUT): HasSwitch(Switch.HOTP_EYEBALL_SHORTCUT),
    (R.HOTP_WORM_SHORTCUT, R.HOTP_GHOST_BLOOD): HasSwitch(Switch.HOTP_EYEBALL_SHORTCUT, otherwise=True),
    (R.HOTP_WORM_SHORTCUT, R.HOTP_ELEVATOR): HasSwitch(Switch.HOTP_WORM_PILLAR),
    (R.HOTP_ELEVATOR, R.HOTP_OLD_MAN): And(
        Has(KeyItem.CLOAK),
        Or(HasSwitch(Face.HOTP_OLD_MAN), otherwise_bow),
    ),
    (R.HOTP_ELEVATOR, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.HOTP_ELEVATOR, R.HOTP_TOP_LEFT): Has(KeyItem.CLAW),
    (R.HOTP_ELEVATOR, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.HOTP_ELEVATOR, R.TR_START): HasElevator(Elevator.TR),
    (R.HOTP_ELEVATOR, R.HOTP_START_LEFT): HasSwitch(Switch.HOTP_LEFT_BACKTRACK, otherwise=True),
    (R.HOTP_ELEVATOR, R.HOTP_WORM_SHORTCUT): HasSwitch(Switch.HOTP_WORM_PILLAR, otherwise=True),
    (R.HOTP_ELEVATOR, R.HOTP_SPIKE_TP_SECRET): Has(KeyItem.CHALICE),
    (R.HOTP_ELEVATOR, R.HOTP_CLAW_LEFT): Or(
        And(HasSwitch(Switch.HOTP_TO_CLAW_2, otherwise=True), can_extra_height),
        And(Has(KeyItem.BELL), Or(HasAll(KeyItem.CLAW, KeyItem.CLOAK), HasAll(Character.KYULI, KeyItem.BLOCK))),
    ),
    (R.HOTP_ELEVATOR, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.HOTP_ELEVATOR, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.HOTP_ELEVATOR, R.APEX): elevator_apex,
    (R.HOTP_ELEVATOR, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.HOTP_ELEVATOR, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.HOTP_ELEVATOR, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.HOTP_CLAW_LEFT, R.HOTP_ELEVATOR): can_extra_height,
    (R.HOTP_CLAW_LEFT, R.HOTP_TOP_LEFT): HasWhite(WhiteDoor.HOTP_CLAW, otherwise=True),
    (R.HOTP_CLAW_LEFT, R.HOTP_CLAW): Has(KeyItem.STAR),
    (R.HOTP_TOP_LEFT, R.HOTP_ABOVE_OLD_MAN): And(
        Has(Eye.GREEN),
        Or(
            HasSwitch(Switch.HOTP_TO_ABOVE_OLD_MAN, otherwise=True),
            And(HasAll(KeyItem.BLOCK, KeyItem.BELL), can_uppies),
        ),
    ),
    (R.HOTP_CLAW_CAMPFIRE, R.HOTP_CLAW): And(
        HasSwitch(Switch.HOTP_CLAW_ACCESS, otherwise=True),
        Or(Has(Character.KYULI), can_block_in_wall),
    ),
    (R.HOTP_CLAW_CAMPFIRE, R.HOTP_HEART): Or(HasSwitch(Crystal.HOTP_AFTER_CLAW), otherwise_crystal),
    (R.HOTP_CLAW, R.HOTP_CLAW_CAMPFIRE): And(Has(KeyItem.CLAW), HasSwitch(Switch.HOTP_CLAW_ACCESS)),
    (R.HOTP_CLAW, R.HOTP_CLAW_LEFT): Has(KeyItem.STAR),
    (R.HOTP_HEART, R.HOTP_CLAW_CAMPFIRE): Or(
        HasSwitch(Crystal.HOTP_AFTER_CLAW),
        Or(
            Has(KeyItem.CLOAK),
            HasAll(Character.ALGUS, KeyItem.ICARUS),
            Has(ShopUpgrade.KYULI_RAY),
            opts=switch_off + hard,
        ),
    ),
    (R.HOTP_HEART, R.HOTP_UPPER_ARIAS): Has(Character.ARIAS),
    (R.HOTP_HEART, R.HOTP_BOSS_CAMPFIRE): And(
        Has(KeyItem.CLAW),
        Or(Has(KeyItem.ICARUS), HasAll(KeyItem.BLOCK, KeyItem.BELL), HasSwitch(Crystal.HOTP_HEART)),
    ),
    (R.HOTP_UPPER_ARIAS, R.HOTP_BOSS_CAMPFIRE): Has(KeyItem.CLAW),
    (R.HOTP_BOSS_CAMPFIRE, R.MECH_TRIPLE_SWITCHES): And(
        HasAll(Eye.GREEN, KeyItem.CLOAK),
        HasSwitch(Switch.HOTP_TP_PUZZLE, Switch.MECH_ARIAS_CYCLOPS),
    ),
    (R.HOTP_BOSS_CAMPFIRE, R.HOTP_MAIDEN): And(
        HasBlue(BlueDoor.HOTP_MAIDEN, otherwise=True),
        Or(Has(KeyItem.SWORD), HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL)),
    ),
    (R.HOTP_BOSS_CAMPFIRE, R.HOTP_TP_PUZZLE): Has(Eye.GREEN),
    (R.HOTP_BOSS_CAMPFIRE, R.HOTP_BOSS): HasWhite(WhiteDoor.HOTP_BOSS, otherwise=True),
    (R.HOTP_TP_PUZZLE, R.HOTP_TP_FALL_TOP): Or(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_TP_PUZZLE, otherwise=True)),
    (R.HOTP_TP_FALL_TOP, R.HOTP_FALL_BOTTOM): Has(KeyItem.CLOAK),
    (R.HOTP_TP_FALL_TOP, R.HOTP_TP_PUZZLE): Or(Has(KeyItem.STAR), HasSwitch(Switch.HOTP_TP_PUZZLE)),
    (R.HOTP_TP_FALL_TOP, R.HOTP_GAUNTLET_CONNECTION): Has(KeyItem.CLAW),
    (R.HOTP_TP_FALL_TOP, R.HOTP_BOSS_CAMPFIRE): Or(Has(Character.KYULI), And(Has(KeyItem.BLOCK), can_combo_height)),
    (R.HOTP_GAUNTLET_CONNECTION, R.HOTP_GAUNTLET): And(HasAll(KeyItem.CLAW, KeyItem.BELL), can_kill_ghosts),
    (R.HOTP_FALL_BOTTOM, R.HOTP_TP_FALL_TOP): Has(KeyItem.CLAW),
    (R.HOTP_FALL_BOTTOM, R.HOTP_UPPER_VOID): Has(Eye.GREEN),
    (R.HOTP_UPPER_VOID, R.HOTP_FALL_BOTTOM): Has(Eye.GREEN),
    (R.HOTP_UPPER_VOID, R.HOTP_LOWER_VOID): Has(KeyItem.VOID),
    (R.HOTP_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.HOTP_BOSS, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.HOTP_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.HOTP_BOSS, R.TR_START): HasElevator(Elevator.TR),
    (R.HOTP_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.HOTP_BOSS, R.APEX): elevator_apex,
    (R.HOTP_BOSS, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.HOTP_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.HOTP_BOSS, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.ROA_START, R.ROA_WORMS): Or(
        HasSwitch(Crystal.ROA_1ST_ROOM),
        # this should be more complicated
        And(Has(KeyItem.BELL), can_crystal),
    ),
    (R.ROA_WORMS, R.ROA_START): Or(
        HasSwitch(Switch.ROA_WORMS, otherwise=True),
        HasSwitch(Crystal.ROA_1ST_ROOM),
        otherwise_crystal,
    ),
    (R.ROA_WORMS, R.ROA_WORMS_CONNECTION): HasWhite(WhiteDoor.ROA_WORMS, otherwise=True),
    (R.ROA_WORMS, R.ROA_LOWER_VOID_CONNECTION): Has(KeyItem.CLAW),
    (R.ROA_HEARTS, R.ROA_BOTTOM_ASCEND): HasSwitch(Switch.ROA_1ST_SHORTCUT),
    (R.ROA_WORMS_CONNECTION, R.ROA_WORMS): HasWhite(WhiteDoor.ROA_WORMS, otherwise=True),
    (R.ROA_WORMS_CONNECTION, R.ROA_HEARTS): Or(
        HasSwitch(Switch.ROA_AFTER_WORMS, otherwise=True),
        Has(KeyItem.STAR),
    ),
    (R.ROA_HEARTS, R.ROA_WORMS_CONNECTION): Or(
        HasSwitch(Switch.ROA_AFTER_WORMS),
        And(HasAll(KeyItem.STAR, KeyItem.BELL), can_extra_height),
    ),
    (R.ROA_SPIKE_CLIMB, R.ROA_BOTTOM_ASCEND): Has(KeyItem.CLAW),
    (R.ROA_BOTTOM_ASCEND, R.ROA_TOP_ASCENT): HasWhite(WhiteDoor.ROA_ASCEND, otherwise=True),
    (R.ROA_BOTTOM_ASCEND, R.ROA_TRIPLE_REAPER): Or(
        HasSwitch(Switch.ROA_ASCEND, otherwise=True),
        HasAll(Character.KYULI, KeyItem.BLOCK, KeyItem.BELL),
    ),
    (R.ROA_TRIPLE_REAPER, R.ROA_ARENA): Or(HasSwitch(Crystal.ROA_3_REAPERS), otherwise_crystal),
    (R.ROA_ARENA, R.ROA_FLAMES_CONNECTION): Has(KeyItem.CLAW),
    (R.ROA_ARENA, R.ROA_TRIPLE_REAPER): HasSwitch(Crystal.ROA_3_REAPERS),
    (R.ROA_ARENA, R.ROA_LOWER_VOID_CONNECTION): Has(Character.KYULI),
    (R.ROA_LOWER_VOID_CONNECTION, R.ROA_ARIAS_BABY_GORGON): And(
        Has(Character.ARIAS),
        Or(HasSwitch(Crystal.ROA_BABY_GORGON), otherwise_crystal),
    ),
    (R.ROA_LOWER_VOID_CONNECTION, R.ROA_FLAMES_CONNECTION): HasAll(KeyItem.STAR, KeyItem.BELL),
    (R.ROA_LOWER_VOID_CONNECTION, R.ROA_LOWER_VOID): HasSwitch(Switch.ROA_LOWER_VOID),
    (R.ROA_LOWER_VOID, R.ROA_UPPER_VOID): Has(KeyItem.VOID),
    (R.ROA_LOWER_VOID, R.ROA_LOWER_VOID_CONNECTION): HasSwitch(Switch.ROA_LOWER_VOID, otherwise=True),
    (R.ROA_ARIAS_BABY_GORGON, R.ROA_FLAMES): And(
        HasSwitch(Switch.ROA_BABY_GORGON),
        HasAll(KeyItem.BLOCK, Character.KYULI, KeyItem.BELL),
    ),
    (R.ROA_ARIAS_BABY_GORGON, R.ROA_LOWER_VOID_CONNECTION): And(
        Has(Character.ARIAS), HasSwitch(Crystal.ROA_BABY_GORGON)
    ),
    (R.ROA_FLAMES_CONNECTION, R.ROA_WORM_CLIMB): And(HasBlue(BlueDoor.ROA_FLAMES, otherwise=True), Has(KeyItem.CLAW)),
    (R.ROA_FLAMES_CONNECTION, R.ROA_LEFT_ASCENT): And(
        Or(HasSwitch(Crystal.ROA_LEFT_ASCEND), And(can_crystal, Has(KeyItem.BELL))),
        can_extra_height,
    ),
    (R.ROA_FLAMES_CONNECTION, R.ROA_ARIAS_BABY_GORGON): HasAny(ShopUpgrade.BRAM_AXE, ShopUpgrade.KYULI_RAY, opts=hard),
    (R.ROA_FLAMES_CONNECTION, R.ROA_FLAMES): And(HasAll(KeyItem.GAUNTLET, KeyItem.BELL), can_extra_height),
    (R.ROA_FLAMES_CONNECTION, R.ROA_LOWER_VOID_CONNECTION): Has(KeyItem.STAR),
    (R.ROA_FLAMES_CONNECTION, R.ROA_LEFT_ASCENT_CRYSTAL): And(HasAll(KeyItem.BELL, Character.KYULI), can_crystal),
    (R.ROA_FLAMES, R.ROA_ARIAS_BABY_GORGON): HasSwitch(Switch.ROA_BABY_GORGON, otherwise=True),
    (R.ROA_WORM_CLIMB, R.ROA_RIGHT_BRANCH): Has(KeyItem.CLAW),
    (R.ROA_RIGHT_BRANCH, R.ROA_MIDDLE): Has(KeyItem.STAR),
    (R.ROA_LEFT_ASCENT, R.ROA_FLAMES_CONNECTION): Or(HasSwitch(Crystal.ROA_LEFT_ASCEND), otherwise_crystal),
    (R.ROA_LEFT_ASCENT, R.ROA_TOP_ASCENT): HasSwitch(Switch.ROA_ASCEND_SHORTCUT),
    (R.ROA_LEFT_ASCENT, R.ROA_LEFT_ASCENT_CRYSTAL): Has(Character.ALGUS),
    (R.ROA_TOP_ASCENT, R.ROA_TRIPLE_SWITCH): can_extra_height,
    (R.ROA_TOP_ASCENT, R.ROA_LEFT_ASCENT): HasSwitch(Switch.ROA_ASCEND_SHORTCUT),
    (R.ROA_TOP_ASCENT, R.ROA_MIDDLE): And(can_extra_height, HasSwitch(Switch.ROA_ASCEND_SHORTCUT)),
    (R.ROA_TRIPLE_SWITCH, R.ROA_MIDDLE): And(
        Or(HasSwitch(Switch.ROA_TRIPLE_1, Switch.ROA_TRIPLE_3), otherwise_crystal),
        HasAll(KeyItem.CLAW, KeyItem.BELL),
    ),
    (R.ROA_MIDDLE, R.ROA_LEFT_SWITCH): can_extra_height,
    (R.ROA_MIDDLE, R.ROA_RIGHT_BRANCH): Has(KeyItem.STAR),
    (R.ROA_MIDDLE, R.ROA_RIGHT_SWITCH_1): Or(Has(Character.KYULI), HasSwitch(Switch.ROA_RIGHT_PATH)),
    (R.ROA_MIDDLE, R.ROA_MIDDLE_LADDER): Or(
        # this could allow more
        HasSwitch(Crystal.ROA_LADDER_L, Crystal.ROA_LADDER_R),
        And(can_crystal, CanReach(R.ROA_LEFT_SWITCH), CanReach(R.ROA_RIGHT_SWITCH_2), opts=switch_off),
    ),
    (R.ROA_MIDDLE, R.ROA_TOP_ASCENT): HasSwitch(Switch.ROA_ASCEND_SHORTCUT, otherwise=True),
    (R.ROA_MIDDLE, R.ROA_TRIPLE_SWITCH): HasSwitch(Switch.ROA_TRIPLE_1, Switch.ROA_TRIPLE_3),
    (R.ROA_MIDDLE, R.ROA_LEFT_BABY_GORGON): can_extra_height,
    (R.ROA_RIGHT_SWITCH_1, R.ROA_RIGHT_SWITCH_2): can_extra_height,
    (R.ROA_MIDDLE_LADDER, R.ROA_UPPER_VOID): HasSwitch(Switch.ROA_SHAFT_L, Switch.ROA_SHAFT_R, otherwise=True),
    (R.ROA_MIDDLE_LADDER, R.ROA_RIGHT_SWITCH_CANDLE): HasAny(
        Character.ALGUS,
        ShopUpgrade.BRAM_AXE,
        ShopUpgrade.BRAM_WHIPLASH,
    ),
    (R.ROA_UPPER_VOID, R.ROA_LOWER_VOID): Has(KeyItem.VOID),
    (R.ROA_UPPER_VOID, R.ROA_SP_CONNECTION): HasSwitch(Crystal.ROA_SHAFT, Switch.ROA_SHAFT_DOWNWARDS),
    (R.ROA_UPPER_VOID, R.ROA_SPIKE_BALLS): Or(HasSwitch(Crystal.ROA_SPIKE_BALLS), otherwise_crystal),
    (R.ROA_SPIKE_BALLS, R.ROA_SPIKE_SPINNERS): HasWhite(WhiteDoor.ROA_BALLS, otherwise=True),
    (R.ROA_SPIKE_SPINNERS, R.ROA_SPIDERS_1): HasWhite(WhiteDoor.ROA_SPINNERS, otherwise=True),
    (R.ROA_SPIKE_SPINNERS, R.ROA_SPIKE_BALLS): HasWhite(WhiteDoor.ROA_BALLS, otherwise=True),
    (R.ROA_SPIDERS_1, R.ROA_RED_KEY): Or(HasSwitch(Face.ROA_SPIDERS), otherwise_bow),
    (R.ROA_SPIDERS_1, R.ROA_SPIDERS_2): can_extra_height,
    (R.ROA_SPIDERS_2, R.ROA_BLOOD_POT_HALLWAY): HasSwitch(Switch.ROA_SPIDERS, otherwise=True),
    (R.ROA_SP_CONNECTION, R.SP_START): Or(
        HasRed(RedDoor.SP),
        CanReach(R.ROA_RED_KEY, opts=red_off),  # TODO: double check
    ),
    (R.ROA_SP_CONNECTION, R.ROA_ELEVATOR): And(
        # can probably make it without claw
        Has(KeyItem.CLAW),
        HasSwitch(Switch.ROA_DARK_ROOM, otherwise=True),
    ),
    (R.ROA_ELEVATOR, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.ROA_ELEVATOR, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.ROA_ELEVATOR, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.ROA_ELEVATOR, R.TR_START): HasElevator(Elevator.TR),
    (R.ROA_ELEVATOR, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.ROA_ELEVATOR, R.ROA_ICARUS): HasSwitch(Switch.ROA_ICARUS, otherwise=True),
    (R.ROA_ELEVATOR, R.ROA_DARK_CONNECTION): Or(Has(KeyItem.CLAW), HasSwitch(Switch.ROA_ELEVATOR, otherwise=True)),
    (R.ROA_ELEVATOR, R.APEX): elevator_apex,
    (R.ROA_ELEVATOR, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.ROA_ELEVATOR, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.ROA_ELEVATOR, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.ROA_DARK_CONNECTION, R.ROA_CENTAUR): HasSwitch(Switch.ROA_BLOOD_POT),
    (R.ROA_DARK_CONNECTION, R.DARK_START): can_extra_height,
    (R.DARK_START, R.DARK_END): And(Has(KeyItem.CLAW), HasSwitch(Switch.DARKNESS, otherwise=True)),
    (R.DARK_END, R.ROA_CENTAUR): Has(KeyItem.CLAW),
    (R.ROA_CENTAUR, R.ROA_DARK_CONNECTION): Or(
        HasSwitch(Switch.ROA_BLOOD_POT, otherwise=True),
        HasBlue(BlueDoor.ROA_BLOOD, otherwise=True),
    ),
    (R.ROA_CENTAUR, R.ROA_BOSS_CONNECTION): Or(
        HasSwitch(Crystal.ROA_CENTAUR),
        And(HasAll(KeyItem.BELL, Character.ARIAS), Or(can_crystal, Has(KeyItem.STAR))),
    ),
    (R.ROA_BOSS_CONNECTION, R.ROA_BOSS): HasSwitch(Switch.ROA_BOSS_ACCESS, otherwise=True),
    (R.ROA_BOSS_CONNECTION, R.ROA_CENTAUR): Or(
        HasSwitch(Crystal.ROA_CENTAUR),
        And(HasAll(KeyItem.BELL, KeyItem.STAR, Character.ARIAS), can_extra_height),
    ),
    (R.ROA_BOSS, R.ROA_APEX_CONNECTION): Has(Eye.GREEN),
    (R.ROA_BOSS, R.ROA_BOSS_CONNECTION): HasSwitch(Switch.ROA_BOSS_ACCESS),
    (R.ROA_APEX_CONNECTION, R.ROA_BOSS): Has(Eye.GREEN),
    (R.ROA_APEX_CONNECTION, R.APEX): HasSwitch(Switch.ROA_APEX_ACCESS, otherwise=True),
    (R.APEX, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.APEX, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.APEX, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.APEX, R.FINAL_BOSS): And(
        HasAll(Eye.RED, Eye.BLUE, Eye.GREEN),
        Or(True_(opts=hard), Has(KeyItem.BELL, opts=easy)),
        HasGoal(),
    ),
    (R.APEX, R.ROA_APEX_CONNECTION): HasSwitch(Switch.ROA_APEX_ACCESS),
    (R.APEX, R.TR_START): HasElevator(Elevator.TR),
    (R.APEX, R.APEX_HEART): can_extra_height,
    (R.APEX, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.APEX, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.APEX, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.APEX, R.APEX_CENTAUR_ACCESS): And(HasBlue(BlueDoor.APEX, otherwise=True), Has(KeyItem.STAR)),
    (R.APEX, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.APEX, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.APEX_CENTAUR_ACCESS, R.APEX_CENTAUR): Has(KeyItem.ADORNED_KEY),
    (R.CAVES_START, R.CAVES_EPIMETHEUS): HasBlue(BlueDoor.CAVES, otherwise=True),
    (R.CAVES_EPIMETHEUS, R.CAVES_UPPER): Or(Has(Character.KYULI), can_block_in_wall, can_combo_height),
    (R.CAVES_EPIMETHEUS, R.CAVES_START): HasBlue(BlueDoor.CAVES, otherwise=True),
    (R.CAVES_UPPER, R.CAVES_ARENA): Or(
        HasAll(KeyItem.SWORD, ShopUpgrade.KYULI_RAY),
        And(Has(ShopUpgrade.ALGUS_METEOR), chalice_on_easy),
    ),
    (R.CAVES_UPPER, R.CAVES_LOWER): HasSwitch(Switch.CAVES_SKELETONS, otherwise=True),
    (R.CAVES_LOWER, R.CAVES_UPPER): HasSwitch(Switch.CAVES_SKELETONS),
    (R.CAVES_LOWER, R.CAVES_ITEM_CHAIN): Has(Eye.RED),
    (R.CAVES_LOWER, R.CATA_START): HasSwitch(
        Switch.CAVES_CATA_1,
        Switch.CAVES_CATA_2,
        Switch.CAVES_CATA_3,
        otherwise=True,
    ),
    (R.CATA_START, R.CATA_CLIMBABLE_ROOT): HasSwitch(Switch.CATA_1ST_ROOM, otherwise=True),
    (R.CATA_START, R.CAVES_LOWER): HasSwitch(Switch.CAVES_CATA_1, Switch.CAVES_CATA_2, Switch.CAVES_CATA_3),
    (R.CATA_CLIMBABLE_ROOT, R.CATA_TOP): And(Has(Eye.RED), HasWhite(WhiteDoor.CATA_TOP, otherwise=True)),
    (R.CATA_TOP, R.CATA_CLIMBABLE_ROOT): And(Has(Eye.RED), HasWhite(WhiteDoor.CATA_TOP, otherwise=True)),
    (R.CATA_TOP, R.CATA_ELEVATOR): HasSwitch(Switch.CATA_ELEVATOR, otherwise=True),
    (R.CATA_TOP, R.CATA_BOW_CAMPFIRE): HasSwitch(Switch.CATA_TOP, otherwise=True),
    (R.CATA_ELEVATOR, R.CATA_BOSS): HasElevator(Elevator.CATA_2),
    (R.CATA_ELEVATOR, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.CATA_ELEVATOR, R.TR_START): HasElevator(Elevator.TR),
    (R.CATA_ELEVATOR, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.CATA_ELEVATOR, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.CATA_ELEVATOR, R.APEX): elevator_apex,
    (R.CATA_ELEVATOR, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.CATA_ELEVATOR, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.CATA_ELEVATOR, R.CATA_TOP): HasSwitch(Switch.CATA_ELEVATOR),
    (R.CATA_ELEVATOR, R.CATA_MULTI): HasBlue(BlueDoor.CATA_ORBS, otherwise=True),
    (R.CATA_ELEVATOR, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.CATA_BOW_CAMPFIRE, R.CATA_TOP): HasSwitch(Switch.CATA_TOP),
    (R.CATA_BOW_CAMPFIRE, R.CATA_BOW_CONNECTION): And(
        Has(Character.KYULI),
        HasBlue(BlueDoor.CATA_SAVE, otherwise=True),
    ),
    (R.CATA_BOW_CAMPFIRE, R.CATA_EYEBALL_BONES): Or(HasSwitch(Face.CATA_AFTER_BOW), otherwise_bow),
    (R.CATA_BOW_CONNECTION, R.CATA_BOW): And(HasBlue(BlueDoor.CATA_BOW, otherwise=True), Has(Character.KYULI)),
    (R.CATA_BOW_CONNECTION, R.CATA_BOW_CAMPFIRE): HasBlue(BlueDoor.CATA_SAVE, otherwise=True),
    (R.CATA_BOW_CONNECTION, R.CATA_VERTICAL_SHORTCUT): HasSwitch(Switch.CATA_VERTICAL_SHORTCUT),
    (R.CATA_VERTICAL_SHORTCUT, R.CATA_BOW_CONNECTION): And(
        HasSwitch(Switch.CATA_VERTICAL_SHORTCUT, otherwise=True),
        Or(HasSwitch(Switch.CATA_MID_SHORTCUT, otherwise=True), HasAll(Character.KYULI, KeyItem.ICARUS)),
    ),
    (R.CATA_EYEBALL_BONES, R.CATA_SNAKE_MUSHROOMS): Has(Eye.RED),
    (R.CATA_SNAKE_MUSHROOMS, R.CATA_DEV_ROOM_CONNECTION): HasAll(KeyItem.CLAW, KeyItem.BELL, Character.ZEEK),
    (R.CATA_SNAKE_MUSHROOMS, R.CATA_EYEBALL_BONES): Has(Eye.RED),
    (R.CATA_SNAKE_MUSHROOMS, R.CATA_DOUBLE_SWITCH): And(
        HasSwitch(Switch.CATA_CLAW_2, otherwise=True),
        Or(Has(KeyItem.CLAW), HasAll(Character.KYULI, Character.ZEEK, KeyItem.BELL)),
    ),
    (R.CATA_DEV_ROOM_CONNECTION, R.CATA_DEV_ROOM): Or(
        HasRed(RedDoor.DEV_ROOM),
        CanReach(R.GT_BOSS, opts=red_off),  # TODO
    ),
    (R.CATA_DOUBLE_SWITCH, R.CATA_SNAKE_MUSHROOMS): HasSwitch(Switch.CATA_CLAW_2),
    (R.CATA_DOUBLE_SWITCH, R.CATA_ROOTS_CAMPFIRE): HasSwitch(Switch.CATA_WATER_1, Switch.CATA_WATER_2, otherwise=True),
    (R.CATA_ROOTS_CAMPFIRE, R.CATA_DOUBLE_SWITCH): HasSwitch(Switch.CATA_WATER_1, Switch.CATA_WATER_2),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_ROOTS_CAMPFIRE): Has(KeyItem.CLAW),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_BLUE_EYE_DOOR): Has(Eye.BLUE),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_ABOVE_ROOTS): Has(KeyItem.CLAW),
    (R.CATA_BELOW_ROOTS_CAMPFIRE, R.CATA_POISON_ROOTS): And(
        HasBlue(BlueDoor.CATA_ROOTS, otherwise=True),
        Has(Character.KYULI),
    ),
    (R.CATA_BLUE_EYE_DOOR, R.CATA_BELOW_ROOTS_CAMPFIRE): Has(Eye.BLUE),
    (R.CATA_BLUE_EYE_DOOR, R.CATA_FLAMES_FORK): HasWhite(WhiteDoor.CATA_BLUE, otherwise=True),
    (R.CATA_FLAMES_FORK, R.CATA_VERTICAL_SHORTCUT): Or(
        HasSwitch(Switch.CATA_SHORTCUT_ACCESS, Switch.CATA_AFTER_BLUE_DOOR, otherwise=True),
        Has(KeyItem.CLAW, opts=hard),
    ),
    (R.CATA_FLAMES_FORK, R.CATA_BLUE_EYE_DOOR): Or(
        HasWhite(WhiteDoor.CATA_BLUE, otherwise=True),
        HasSwitch(Switch.CATA_SHORTCUT_ACCESS, otherwise=True),
    ),
    (R.CATA_FLAMES_FORK, R.CATA_FLAMES): HasSwitch(Switch.CATA_FLAMES_2, otherwise=True),
    (R.CATA_FLAMES_FORK, R.CATA_CENTAUR): HasSwitch(Switch.CATA_LADDER_BLOCKS, otherwise=True),
    (R.CATA_CENTAUR, R.CATA_4_FACES): Has(KeyItem.CLAW),
    (R.CATA_CENTAUR, R.CATA_FLAMES_FORK): HasSwitch(Switch.CATA_LADDER_BLOCKS),
    (R.CATA_CENTAUR, R.CATA_BOSS): HasSwitch(Face.CATA_CAMPFIRE),
    (R.CATA_4_FACES, R.CATA_DOUBLE_DOOR): Or(HasSwitch(Face.CATA_X4), otherwise_bow),
    (R.CATA_DOUBLE_DOOR, R.CATA_4_FACES): HasSwitch(Face.CATA_X4),
    (R.CATA_DOUBLE_DOOR, R.CATA_VOID_R): And(
        Has(KeyItem.BELL),
        can_kill_ghosts,
        Or(HasSwitch(Face.CATA_DOUBLE_DOOR), otherwise_bow),
    ),
    (R.CATA_VOID_R, R.CATA_VOID_L): Has(KeyItem.VOID),
    (R.CATA_VOID_L, R.CATA_VOID_R): Has(KeyItem.VOID),
    (R.CATA_VOID_L, R.CATA_BOSS): And(HasWhite(WhiteDoor.CATA_PRISON, otherwise=True), Has(Character.KYULI)),
    (R.CATA_BOSS, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.CATA_BOSS, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.CATA_BOSS, R.CATA_CENTAUR): Or(HasSwitch(Face.CATA_CAMPFIRE), otherwise_bow),
    (R.CATA_BOSS, R.CATA_VOID_L): HasWhite(WhiteDoor.CATA_PRISON, otherwise=True),
    (R.CATA_BOSS, R.TR_START): Or(HasElevator(Elevator.TR), HasSwitch(Switch.TR_ELEVATOR, otherwise=True)),
    (R.CATA_BOSS, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.CATA_BOSS, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.CATA_BOSS, R.APEX): elevator_apex,
    (R.CATA_BOSS, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.CATA_BOSS, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.CATA_BOSS, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.TR_START, R.CATA_ELEVATOR): HasElevator(Elevator.CATA_1),
    (R.TR_START, R.CATA_BOSS): Or(HasElevator(Elevator.CATA_2), And(HasSwitch(Switch.TR_ELEVATOR), can_extra_height)),
    (R.TR_START, R.HOTP_ELEVATOR): HasElevator(Elevator.HOTP),
    (R.TR_START, R.HOTP_BOSS): HasElevator(Elevator.ROA_1),
    (R.TR_START, R.ROA_ELEVATOR): HasElevator(Elevator.ROA_2),
    (R.TR_START, R.TR_LEFT): And(
        HasBlue(BlueDoor.TR, otherwise=True),
        Or(HasRed(RedDoor.TR), CanReach(R.TR_START, opts=red_off)),  # TODO
    ),
    (R.TR_START, R.APEX): elevator_apex,
    (R.TR_START, R.GT_BOSS): HasElevator(Elevator.GT_2),
    (R.TR_START, R.MECH_ZEEK_CONNECTION): HasElevator(Elevator.MECH_1),
    (R.TR_START, R.MECH_BOSS): HasElevator(Elevator.MECH_2),
    (R.TR_START, R.TR_BRAM): Has(Eye.BLUE),
    (R.TR_LEFT, R.TR_TOP_RIGHT): HasAll(KeyItem.STAR, KeyItem.BELL),
    (R.TR_LEFT, R.TR_BOTTOM_LEFT): And(Has(KeyItem.BELL), can_kill_ghosts),
    (R.TR_BOTTOM_LEFT, R.TR_BOTTOM): Has(Eye.BLUE),
    (R.TR_TOP_RIGHT, R.TR_GOLD): And(
        HasAll(Character.ZEEK, KeyItem.BELL),
        Or(HasAny(Character.KYULI, KeyItem.BLOCK), can_uppies),
    ),
    (R.TR_TOP_RIGHT, R.TR_MIDDLE_RIGHT): Or(
        HasSwitch(Crystal.TR_GOLD),
        And(HasAll(KeyItem.BELL, KeyItem.CLAW), can_crystal, opts=switch_off),
    ),
    (R.TR_MIDDLE_RIGHT, R.TR_DARK_ARIAS): Has(Eye.GREEN),
    (R.TR_MIDDLE_RIGHT, R.TR_BOTTOM): HasSwitch(Switch.TR_BOTTOM, otherwise=True),
    (R.TR_BOTTOM, R.TR_BOTTOM_LEFT): Has(Eye.BLUE),
    (R.CD_START, R.CD_2): Or(HasSwitch(Switch.CD_1, otherwise=True), HasSwitch(Crystal.CD_BACKTRACK)),
    (R.CD_START, R.CD_BOSS): And(CanReach(R.CD_ARIAS_ROUTE), CanReach(R.CD_TOP)),
    (R.CD_3, R.CD_MIDDLE): HasSwitch(Switch.CD_3, otherwise=True),
    (R.CD_MIDDLE, R.CD_KYULI_ROUTE): HasSwitch(Switch.CD_CAMPFIRE, otherwise=True),
    (R.CD_MIDDLE, R.CD_ARIAS_ROUTE): Has(Character.ARIAS),
    (R.CD_KYULI_ROUTE, R.CD_CAMPFIRE_3): Has(Character.KYULI),
    (R.CD_CAMPFIRE_3, R.CD_ARENA): Or(HasSwitch(Crystal.CD_CAMPFIRE), otherwise_crystal),
    (R.CD_STEPS, R.CD_TOP): Or(HasSwitch(Crystal.CD_STEPS), otherwise_crystal),
    (R.CATH_START, R.CATH_START_LEFT): And(
        Or(HasSwitch(Crystal.CATH_1ST_ROOM), CanReach(R.CATA_START, opts=switch_off)),  # TODO
        Has(KeyItem.CLAW),
    ),
    (R.CATH_START_RIGHT, R.CATH_START_TOP_LEFT): HasSwitch(Switch.CATH_BOTTOM, otherwise=True),
    (R.CATH_START_TOP_LEFT, R.CATH_START_LEFT): HasSwitch(Face.CATH_L),
    (R.CATH_START_LEFT, R.CATH_TP): Or(HasSwitch(Face.CATH_R), otherwise_bow),
    (R.CATH_LEFT_SHAFT, R.CATH_SHAFT_ACCESS): And(HasSwitch(Crystal.CATH_SHAFT_ACCESS), Has(KeyItem.CLAW)),
    (R.CATH_LEFT_SHAFT, R.CATH_UNDER_CAMPFIRE): Or(HasSwitch(Crystal.CATH_SHAFT), otherwise_crystal),
    (R.CATH_UNDER_CAMPFIRE, R.CATH_CAMPFIRE_1): HasAll(Character.ZEEK, KeyItem.BELL),
    (R.CATH_CAMPFIRE_1, R.CATH_SHAFT_ACCESS): Has(Character.KYULI),
    (R.CATH_SHAFT_ACCESS, R.CATH_ORB_ROOM): HasSwitch(Switch.CATH_BESIDE_SHAFT, otherwise=True),
    (R.CATH_ORB_ROOM, R.CATH_GOLD_BLOCK): Or(
        HasSwitch(Crystal.CATH_ORBS),
        And(can_crystal, Has(KeyItem.BELL), opts=switch_off),
    ),
    (R.CATH_RIGHT_SHAFT_CONNECTION, R.CATH_RIGHT_SHAFT): HasAll(KeyItem.BELL, Character.ZEEK, KeyItem.BOW),
    (R.CATH_RIGHT_SHAFT, R.CATH_TOP): Has(KeyItem.CLAW),
    (R.CATH_TOP, R.CATH_UPPER_SPIKE_PIT): Or(
        HasSwitch(Crystal.CATH_SPIKE_PIT),
        otherwise_crystal,
        HasAll(KeyItem.CLOAK, KeyItem.BLOCK, KeyItem.BELL, opts=hard),
    ),
    (R.CATH_TOP, R.CATH_CAMPFIRE_2): HasSwitch(Switch.CATH_TOP_CAMPFIRE, otherwise=True),
    (R.SP_START, R.SP_STAR_END): HasAll(KeyItem.BLOCK, KeyItem.BELL, KeyItem.CLAW),
    (R.SP_START, R.SP_CAMPFIRE_1): Or(HasSwitch(Crystal.SP_BLOCKS), otherwise_crystal),
    (R.SP_CAMPFIRE_1, R.SP_HEARTS): HasSwitch(Switch.SP_BUBBLES, otherwise=True),
    (R.SP_HEARTS, R.SP_CAMPFIRE_1): HasSwitch(Switch.SP_BUBBLES),
    (R.SP_HEARTS, R.SP_ORBS): HasAll(KeyItem.STAR, KeyItem.BELL, Character.KYULI),
    (R.SP_HEARTS, R.SP_FROG): HasSwitch(Switch.SP_DOUBLE_DOORS, otherwise=True),
    (R.SP_PAINTING, R.SP_HEARTS): And(HasAll(KeyItem.BELL, ShopUpgrade.ALGUS_METEOR), chalice_on_easy),
    (R.SP_PAINTING, R.SP_SHAFT): And(Has(KeyItem.CLAW), HasBlue(BlueDoor.SP, otherwise=True)),
    (R.SP_SHAFT, R.SP_PAINTING): HasBlue(BlueDoor.SP, otherwise=True),
    (R.SP_SHAFT, R.SP_STAR): And(HasAll(KeyItem.CLAW, KeyItem.BELL), Or(HasSwitch(Crystal.SP_STAR), otherwise_crystal)),
    (R.SP_STAR, R.SP_SHAFT): And(
        HasAll(KeyItem.BELL, ShopUpgrade.ALGUS_METEOR),
        chalice_on_easy,
        HasSwitch(Crystal.SP_STAR),
    ),
    (R.SP_STAR, R.SP_STAR_CONNECTION): Has(KeyItem.STAR),
    (R.SP_STAR_CONNECTION, R.SP_STAR): Has(KeyItem.STAR),
    (R.SP_STAR_CONNECTION, R.SP_STAR_END): And(
        Has(KeyItem.STAR),
        Or(HasSwitch(Switch.SP_AFTER_STAR), Has(Character.ARIAS, opts=switch_off)),
    ),
    (R.SP_STAR_END, R.SP_STAR_CONNECTION): And(Has(KeyItem.STAR), HasSwitch(Switch.SP_AFTER_STAR)),
}

MAIN_LOCATION_RULES = {}
